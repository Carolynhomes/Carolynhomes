<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0"><channel><title>牧天白衣</title><link>https://Carolynhomes.github.io/Carolynhomes</link><description>哎，今天又是美好的一天哟！！！！！</description><copyright>牧天白衣</copyright><docs>http://www.rssboard.org/rss-specification</docs><generator>python-feedgen</generator><image><url>http://cdn.jsdelivr.net/gh/Carolynhomes/images@main/img/study/personal_page202411031753659.jpg</url><title>avatar</title><link>https://Carolynhomes.github.io/Carolynhomes</link></image><lastBuildDate>Wed, 06 Nov 2024 01:46:42 +0000</lastBuildDate><managingEditor>牧天白衣</managingEditor><ttl>60</ttl><webMaster>牧天白衣</webMaster><item><title>记录一下日常碰到的网站</title><link>https://Carolynhomes.github.io/Carolynhomes/post/ji-lu-yi-xia-ri-chang-peng-dao-de-wang-zhan.html</link><description># 电影电视剧&#13;
## 七味网&#13;
https://www.qwnull.com/&#13;
&gt; 感觉画质好像还可以~ 还有各种网盘资源，能存到网盘分享之类的&#13;
&gt; 电脑打开没啥广告&#13;
。</description><guid isPermaLink="true">https://Carolynhomes.github.io/Carolynhomes/post/ji-lu-yi-xia-ri-chang-peng-dao-de-wang-zhan.html</guid><pubDate>Wed, 06 Nov 2024 01:46:14 +0000</pubDate></item><item><title>碎碎碎</title><link>https://Carolynhomes.github.io/Carolynhomes/post/sui-sui-sui.html</link><description>&gt; [!important]&#13;
&gt; 感觉虽然我想学习一些技术什么的，但是，论文也是必不可少的，而且是必须要看的。</description><guid isPermaLink="true">https://Carolynhomes.github.io/Carolynhomes/post/sui-sui-sui.html</guid><pubDate>Tue, 05 Nov 2024 12:19:36 +0000</pubDate></item><item><title>05-Vue使用ElementUI搭建界面</title><link>https://Carolynhomes.github.io/Carolynhomes/post/05-Vue-shi-yong-ElementUI-da-jian-jie-mian.html</link><description># ElementUI 官网&#13;
&#13;
https://element.eleme.cn/#/zh-CN/component/installation&#13;
&#13;
# Vue 安装 ElementUI&#13;
&#13;
用 idea 打开你的项目目录，然后打开终端 terminal，&#13;
&#13;
```&#13;
cd vue&#13;
```&#13;
&#13;
然后运行 `npm i element-ui -S`&#13;
&#13;
**没搞定的检查下 npm 镜像，修改镜像源为淘宝**&#13;
&#13;
```&#13;
npm config set registry https://registry.npmmirror.com&#13;
```&#13;
&#13;
查看 npm 镜像&#13;
&#13;
```&#13;
npm config get&#13;
```&#13;
&#13;
或者安装 `nrm`，管理 `npm`镜像&#13;
&#13;
```&#13;
npm install nrm -g&#13;
nrm` 切换镜像为 `taobao&#13;
nrm ls&#13;
nrm use taobao&#13;
nrm current&#13;
```&#13;
&#13;
![img](https://cdn.nlark.com/yuque/0/2023/png/751015/1691587364456-35f880ef-8189-483c-a750-bc94eb09e3d4.png#averageHue=%232e2e2d&amp;clientId=ua3fd209b-0afa-4&amp;from=paste&amp;height=207&amp;id=u802a3d1d&amp;originHeight=259&amp;originWidth=778&amp;originalType=binary&amp;ratio=1.25&amp;rotation=0&amp;showTitle=false&amp;size=40110&amp;status=done&amp;style=none&amp;taskId=u981a5c3d-0330-4cf1-bc5b-0149edbca68&amp;title=&amp;width=622.4)![img](https://cdn.nlark.com/yuque/0/2023/png/751015/1691587394872-94ee0aa1-50c9-499f-85a0-a08954064fc5.png#averageHue=%2331302f&amp;clientId=ua3fd209b-0afa-4&amp;from=paste&amp;height=49&amp;id=uab0f175a&amp;originHeight=61&amp;originWidth=646&amp;originalType=binary&amp;ratio=1.25&amp;rotation=0&amp;showTitle=false&amp;size=7987&amp;status=done&amp;style=none&amp;taskId=u2de55129-8987-4b8e-9a67-b39cbd70daa&amp;title=&amp;width=516.8)![img](https://cdn.nlark.com/yuque/0/2023/png/751015/1691587411488-655ba39b-fd4f-47fa-8b97-195253540685.png#averageHue=%23302e2d&amp;clientId=ua3fd209b-0afa-4&amp;from=paste&amp;height=167&amp;id=u2ae2e71b&amp;originHeight=209&amp;originWidth=684&amp;originalType=binary&amp;ratio=1.25&amp;rotation=0&amp;showTitle=false&amp;size=32886&amp;status=done&amp;style=none&amp;taskId=u6f770321-88c7-4020-8a26-773321c27ba&amp;title=&amp;width=547.2)&#13;
&#13;
# Vue 配置安装 ElementUI&#13;
&#13;
在 `main.js`里引入下面的内容&#13;
&#13;
```javascript&#13;
import ElementUI from 'element-ui';&#13;
import 'element-ui/lib/theme-chalk/index.css';&#13;
&#13;
Vue.use(ElementUI, { size: 'small' });&#13;
```&#13;
&#13;
上面代码作用：在你的Vue项目中引入并注册Element UI库，同时指定使用小号尺寸的组件。</description><guid isPermaLink="true">https://Carolynhomes.github.io/Carolynhomes/post/05-Vue-shi-yong-ElementUI-da-jian-jie-mian.html</guid><pubDate>Tue, 05 Nov 2024 08:18:00 +0000</pubDate></item><item><title>Gpt通知</title><link>https://Carolynhomes.github.io/Carolynhomes/post/Gpt-tong-zhi.html</link><description># 2024年11月5日09点53分&#13;
选择`附件`旁边的`互联网`标志，然后输入的问题如下：&#13;
&gt; [!TIP]&#13;
&gt; 搜 xxxxx（你的问题）&#13;
&gt; eg: 搜 历史上的今天都发生过哪些事情&#13;
![image](https://github.com/user-attachments/assets/f8770392-8323-408b-aaa6-0886a7eb589d)&#13;
&#13;
这样就会在互联网上进行查找，并给出相应的网址，其他的自己摸索&#13;
&#13;
# 2024年11月4日15点45分&#13;
周四晚上跟周五考试的时候，我跟那老板商量了一下，那段时间会给我们100/h的次数，`如果到时候确实有的话(那个时候老板如果还记得，在线的话)`，可以肆无忌惮的用了（当然有能力自然自己写，笑死）&#13;
&#13;
&#13;
# 11月4日 08:57:34&#13;
版本回退了，大家还是自主传图片吧，后台帮大家传错误率太高了。</description><guid isPermaLink="true">https://Carolynhomes.github.io/Carolynhomes/post/Gpt-tong-zhi.html</guid><pubDate>Tue, 05 Nov 2024 01:56:41 +0000</pubDate></item><item><title>04-Git速成</title><link>https://Carolynhomes.github.io/Carolynhomes/post/04-Git-su-cheng.html</link><description>## 视频教程&#13;
&#13;
https://www.bilibili.com/video/BV1um4y1s7AN/?spm_id_from=333.788.videopod.sections&amp;vd_source=5c34fdff72dc0c2c15c307e789fe5140&#13;
&#13;
## 软件安装&#13;
&#13;
官方下载（比较慢）：https://git-scm.com/downloads&#13;
&#13;
## gitee&#13;
&#13;
注册账号： https://gitee.com/&#13;
&#13;
新建一个仓库，输入名字之后，直接确定即可`（我懒得自己想名字，就跟教程一样了）`&#13;
&#13;
![image](https://github.com/user-attachments/assets/4bd69d8d-7a25-4605-b1da-8e37f4e533d3)&#13;
## 步骤&#13;
&#13;
### 先初始化项目目录为git仓库&#13;
&#13;
先进入对应目录下的cmd&#13;
&#13;
&gt; 或者打开git&#13;
&#13;
然后，输入`git init`把这个目录变成一个`git`仓库&#13;
&#13;
&gt;  [!TIP]&#13;
&gt;&#13;
&gt; 我就是没有把git配置到环境变量，我是直接在目录空白处，git bash打开了&#13;
&#13;
### 本地仓库跟远程的仓库建立连接&#13;
&#13;
建议直接 `--global`&#13;
&#13;
&gt; 在此之前，应先配置一下git&#13;
&gt;&#13;
&gt; **git config  user.email '[your_email@example.com](mailto:your_email@example.com)'**&#13;
&gt;&#13;
&gt; `git config  --global user.email 'your_email@example.com'`&#13;
&gt;&#13;
&gt; **git config  user.name 'username'**&#13;
&gt;&#13;
&gt; `**git config --global user.name 'username'**`&#13;
&#13;
```bash&#13;
git remote add origin https://gitee.com/carolynhomes/honey2024.git&#13;
```&#13;
&#13;
`git remote -v` 看看配置&#13;
&#13;
![image](https://github.com/user-attachments/assets/4bd69d8d-7a25-4605-b1da-8e37f4e533d3)&#13;
### 新建 `.gitignore`文件&#13;
&#13;
```bash&#13;
.idea&#13;
node_modules&#13;
*.iml&#13;
```&#13;
&#13;
加进去&#13;
&#13;
### 暂存代码&#13;
&#13;
暂存代码 **git add . (要注意当前的仓库是否存在旧的仓库文件夹 .git，如果存在要删除掉)**&#13;
&#13;
```git&#13;
# 把当前目录除了 .gitignore描述之外的所有文件全部加入到暂存区&#13;
git add .&#13;
```&#13;
&#13;
然后执行`git status`查看状态，下图是正常状态：&#13;
&#13;
![image](https://github.com/user-attachments/assets/9c52bdac-71de-4752-b1a5-bb278cec076a)&#13;
### 提交文件到本地仓库&#13;
&#13;
`git commit -m '初次提交'`&#13;
&#13;
### 推送代码到远程仓库&#13;
&#13;
`git push -u origin 'master'`&#13;
&#13;
&gt; 强制覆盖远程仓库&#13;
&gt; **git push -f origin 'master'**&#13;
&#13;
![image](https://github.com/user-attachments/assets/8ad6a1cd-b811-4ebd-8eba-873d84e96304)&#13;
这就是成功了&#13;
&#13;
### idea推送到gitee&#13;
&#13;
![image](https://github.com/user-attachments/assets/0d3f770c-0403-4b14-abad-0083eb208ef7)&#13;
修改内容，之后点击 commit，然后输入备注，就可以点第三个&#13;
&#13;
然后弹出来继续点击`push`即可&#13;
&#13;
### 注意&#13;
&#13;
本地没有更新远程仓库的修改，直接提交会提示你错误&#13;
&#13;
![image](https://github.com/user-attachments/assets/6db7995b-3424-4453-ba6d-3f7f983b148d)&#13;
**在我们提交代码到远程仓库之前，需要先更新远程仓库的代码到本地**&#13;
&#13;
## git操作&#13;
&#13;
### 基本操作&#13;
&#13;
```bash&#13;
# 配置&#13;
# 全局配置&#13;
git config --global user.email 'your_email@example.com'&#13;
git config --global user.name 'username'&#13;
# 仓库配置&#13;
git config user.email 'your_email@example.com'&#13;
git config user.name 'username'&#13;
&#13;
git config --global --list&#13;
git config --list&#13;
&#13;
&#13;
# 新建仓库&#13;
git init&#13;
# 添加远程仓库&#13;
git remote add origin ''&#13;
# 查看远程仓库&#13;
git remote -v&#13;
&#13;
# 添加文件到暂存区&#13;
git add .&#13;
# 查看状态&#13;
git status&#13;
# 忽略文件&#13;
.gitignore文件&#13;
&#13;
# 提交&#13;
git commit -m 'init'&#13;
&#13;
# 拉取远程代码&#13;
git pull origin master&#13;
# 强制推送代码到远程仓库&#13;
git push -f origin master&#13;
&#13;
# 克隆代码&#13;
git clone ''&#13;
```&#13;
&#13;
### 常用操作&#13;
&#13;
```bash&#13;
# 列出本地所有分支&#13;
git branch&#13;
&#13;
# 新建一个分支，并切换到该分支&#13;
git checkout -b 分支名&#13;
# 切换分支&#13;
git checkout 分支名&#13;
# merge其他分支到当前分支&#13;
git merge 分支名&#13;
&#13;
# 暂存&#13;
git stash&#13;
git stash list&#13;
git stash pop [stash]&#13;
git stash apply [stash]&#13;
git stash drop [stash]&#13;
```。</description><guid isPermaLink="true">https://Carolynhomes.github.io/Carolynhomes/post/04-Git-su-cheng.html</guid><pubDate>Mon, 04 Nov 2024 07:38:22 +0000</pubDate></item><item><title>http重定向到https【cloudflare】</title><link>https://Carolynhomes.github.io/Carolynhomes/post/http-zhong-ding-xiang-dao-https%E3%80%90cloudflare%E3%80%91.html</link><description>&gt; [!TIP]&#13;
&gt; 因为我的GitHub主页，就是想换个域名，然后同时任何地方都可以访问GitHub，所以用cloudflare`那啥` 了一个`cdn`，然后会加速访问该网站等等（`专业术语===无`）&#13;
&#13;
参考本链接：https://blog.liyifan.xyz/post/http-zhong-ding-xiang-dao-https%E3%80%90cloudflare%E3%80%91.html&#13;
&#13;
然后就不会显示此网站不安全了~（I got it)。</description><guid isPermaLink="true">https://Carolynhomes.github.io/Carolynhomes/post/http-zhong-ding-xiang-dao-https%E3%80%90cloudflare%E3%80%91.html</guid><pubDate>Mon, 04 Nov 2024 05:26:49 +0000</pubDate></item><item><title>03-Vue快速入门</title><link>https://Carolynhomes.github.io/Carolynhomes/post/03-Vue-kuai-su-ru-men.html</link><description>## 课程演示代码&#13;
&#13;
https://pan.baidu.com/s/1IsFsMT8y1lhVQKwWFngmSw?pwd=t56j&#13;
&#13;
## 课程视频讲解&#13;
&#13;
https://www.bilibili.com/video/BV1c14y1z7SN/?spm_id_from=333.1296.top_right_bar_window_history.content.click&amp;vd_source=5c34fdff72dc0c2c15c307e789fe5140&#13;
&#13;
## Vue 起步（Vue2）&#13;
&#13;
文档：https://v2.cn.vuejs.org/&#13;
&#13;
**语法如下：**&#13;
&#13;
```javascript&#13;
var example1 = new Vue({&#13;
  el: '#example-1',&#13;
  data: {&#13;
    counter: 0&#13;
  }&#13;
})&#13;
```&#13;
&#13;
- `{{ }}` 变量，表达式渲染&#13;
- `v-html` html 模板，渲染 html&#13;
- `v-model` 绑定值（双向绑定）&#13;
- `v-if` `v-else-if` `v-else` 判断&#13;
- `v-bind` 简写：绑定属性&#13;
- `v-on` 简写 @ 事件绑定&#13;
- `v-for` 循环&#13;
- 动态 `class style`&#13;
&#13;
---&#13;
&#13;
下载软件 nodejs v16  &#13;
安装 node &amp; npm  &#13;
npm 配置淘宝镜像：&#13;
&#13;
```bash&#13;
npm config set registry http://registry.npm.taobao.org/&#13;
```&#13;
&#13;
## Vue 脚手架搭建&#13;
&#13;
`新建目录`：E:\local_blog\Bilibili\代码\小白做毕设&#13;
&#13;
脚手架工具：https://cli.vuejs.org/zh/guide/&#13;
&#13;
```bash&#13;
// 在cmd直接运行&#13;
npm install -g @vue/cli&#13;
&#13;
vue --version&#13;
&#13;
// 进入目录小白做毕设2024，再运行&#13;
vue create vue&#13;
```&#13;
&#13;
![image](https://github.com/user-attachments/assets/d46cb95f-8d53-4afe-93dc-37c1222adfd8)&#13;
&#13;
`如上图所示`就是安装成功&#13;
&#13;
之后执行命令：&#13;
&#13;
```bash&#13;
cd vue&#13;
npm run serve&#13;
```&#13;
&#13;
![image](https://github.com/user-attachments/assets/f56d7ff5-d451-4273-b7d6-d54b39da25cf)&#13;
&#13;
`如上图所示即为成功`&#13;
&#13;
## 对脚手架内容进行修改&#13;
&#13;
配置文件`vue.config.js`:&#13;
&#13;
```js&#13;
const { defineConfig } = require('@vue/cli-service')&#13;
module.exports = defineConfig({&#13;
  transpileDependencies: true,&#13;
  devServer: {&#13;
    port: 7000&#13;
  },&#13;
  chainWebpack: config =&gt;{&#13;
    config.plugin('html')&#13;
        .tap(args =&gt; {&#13;
          args[0].title = '青哥哥好帅啊';&#13;
          return args;&#13;
        })&#13;
  }&#13;
})&#13;
```&#13;
&#13;
`App.vue`&#13;
&#13;
```vue&#13;
&lt;template&gt;&#13;
  &lt;div id='app'&gt;&#13;
    &lt;router-view/&gt;&#13;
  &lt;/div&gt;&#13;
&lt;/template&gt;&#13;
```&#13;
&#13;
`HomeView.vue`&#13;
&#13;
```vue&#13;
&lt;template&gt;&#13;
  &lt;div&gt;&#13;
    你好你好啊&#13;
  &lt;/div&gt;&#13;
&lt;/template&gt;&#13;
&#13;
&lt;script&gt;&#13;
&#13;
export default {&#13;
  name: 'HomeView'&#13;
}&#13;
&lt;/script&gt;&#13;
```&#13;
&#13;
`router目录下的index.js`&#13;
&#13;
```js&#13;
import Vue from 'vue'&#13;
import VueRouter from 'vue-router'&#13;
&#13;
Vue.use(VueRouter)&#13;
&#13;
const routes = [&#13;
  {&#13;
    path: '/',&#13;
    name: 'home',&#13;
    component: () =&gt; import('../views/HomeView.vue')&#13;
  }&#13;
]&#13;
&#13;
const router = new VueRouter({&#13;
  mode: 'history',&#13;
  base: process.env.BASE_URL,&#13;
  routes&#13;
})&#13;
&#13;
export default router&#13;
```&#13;
&#13;
在`src目录下的assets新建一个css文件夹，新建global.css文件`&#13;
&#13;
```css&#13;
* {&#13;
    box-sizing: border-box;&#13;
}&#13;
body {&#13;
    color: #333;&#13;
    font-size: 14px;&#13;
    margin: 0;&#13;
    padding: 0;&#13;
}&#13;
```&#13;
&#13;
。</description><guid isPermaLink="true">https://Carolynhomes.github.io/Carolynhomes/post/03-Vue-kuai-su-ru-men.html</guid><pubDate>Mon, 04 Nov 2024 05:17:23 +0000</pubDate></item><item><title>Everything 关闭开机自动启动</title><link>https://Carolynhomes.github.io/Carolynhomes/post/Everything%20-guan-bi-kai-ji-zi-dong-qi-dong.html</link><description>1. 选择 `工具`-&gt;`选项`&#13;
&#13;
2. 点击`常规` （我还以为不能点这个，醉了）&#13;
&#13;
3. 关闭 开机自动启动和以管理员运行即可 **（`因为我要换一个Listary用了`）**。</description><guid isPermaLink="true">https://Carolynhomes.github.io/Carolynhomes/post/Everything%20-guan-bi-kai-ji-zi-dong-qi-dong.html</guid><pubDate>Mon, 04 Nov 2024 04:18:29 +0000</pubDate></item><item><title>Gmeek 给全局文章加目录</title><link>https://Carolynhomes.github.io/Carolynhomes/post/Gmeek%20-gei-quan-ju-wen-zhang-jia-mu-lu.html</link><description>&gt; 2024年11月4日10点19分 官方的那个好像G了， 然后用另一个即可&#13;
&#13;
&gt; [!Tip]&#13;
&gt; 在右下角有个圆形按钮，点击就可以弹出目录。</description><guid isPermaLink="true">https://Carolynhomes.github.io/Carolynhomes/post/Gmeek%20-gei-quan-ju-wen-zhang-jia-mu-lu.html</guid><pubDate>Mon, 04 Nov 2024 02:22:48 +0000</pubDate></item><item><title>Gmeek 修改文章发布时间</title><link>https://Carolynhomes.github.io/Carolynhomes/post/Gmeek%20-xiu-gai-wen-zhang-fa-bu-shi-jian.html</link><description>&gt; 也就是以更新时间排序的意思&#13;
&#13;
如需修改发布时间，可以在文章 `最后一行(后面不能有空行) `添加如下代码。</description><guid isPermaLink="true">https://Carolynhomes.github.io/Carolynhomes/post/Gmeek%20-xiu-gai-wen-zhang-fa-bu-shi-jian.html</guid><pubDate>Mon, 04 Nov 2024 02:03:54 +0000</pubDate></item><item><title>日常生活中碰到的问题</title><link>https://Carolynhomes.github.io/Carolynhomes/post/ri-chang-sheng-huo-zhong-peng-dao-de-wen-ti.html</link><description># 1. 清理C盘&#13;
&#13;
参考文章（很详细）：https://www.zhihu.com/question/381961379/answer/2887802581&#13;
&gt; [!TIP]&#13;
&gt; 里面的 `桌面搬家` `更改新内容的保存位置`，建议都这么干&#13;
&#13;
。</description><guid isPermaLink="true">https://Carolynhomes.github.io/Carolynhomes/post/ri-chang-sheng-huo-zhong-peng-dao-de-wen-ti.html</guid><pubDate>Sun, 03 Nov 2024 11:12:40 +0000</pubDate></item><item><title>Gmeek强调信息的5种方式</title><link>https://Carolynhomes.github.io/Carolynhomes/post/Gmeek-qiang-diao-xin-xi-de-5-zhong-fang-shi.html</link><description>&gt; [!NOTE]&#13;
&gt; Useful information that users should know, even when skimming content.——[!NOTE]&#13;
&#13;
&gt; [!TIP]&#13;
&gt; Helpful advice for doing things better or more easily.——[!TIP]&#13;
&#13;
&gt; [!IMPORTANT]&#13;
&gt; Key information users need to know to achieve their goal.——[!IMPORTANT]&#13;
&#13;
&gt; [!WARNING]&#13;
&gt; Urgent info that needs immediate user attention to avoid problems.——[!WARNING]&#13;
&#13;
&gt; [!CAUTION]&#13;
&gt; Advises about risks or negative outcomes of certain actions.——[!CAUTION]&#13;
。</description><guid isPermaLink="true">https://Carolynhomes.github.io/Carolynhomes/post/Gmeek-qiang-diao-xin-xi-de-5-zhong-fang-shi.html</guid><pubDate>Sun, 03 Nov 2024 11:01:32 +0000</pubDate></item><item><title>02-JS快速入门</title><link>https://Carolynhomes.github.io/Carolynhomes/post/02-JS-kuai-su-ru-men.html</link><description>菜鸟教程：https://www.runoob.com/js/js-tutorial.html&#13;
&#13;
# JS&#13;
&#13;
百度打开右键，F12 检查，打开控制台，可以执行 js 代码&#13;
&#13;
## 对象操作&#13;
&#13;
- 对象的增删改查  &#13;
&#13;
- 创建对象`let obj = {}` &#13;
&#13;
现在对象的创建有两种  var 不常用了&#13;
&#13;
主要是  let obj = {} 和  const obj = {} ，后一个主要用于常量&#13;
&#13;
- 新增属性 `obj.a = 1`&#13;
- 修改属性 `obj.a = 'a'`&#13;
- 查询属性 `obj.a`&#13;
- 删除属性 `delete obj.a`&#13;
&#13;
```javascript&#13;
 &lt;body&gt;&#13;
   &lt;script&gt;&#13;
     let obj = {};&#13;
     const obj2 = {};&#13;
 &#13;
     obj.a = '1';&#13;
     console.log(obj);&#13;
 &#13;
     obj.a = true;&#13;
     console.log(obj);&#13;
 &#13;
     delete obj.a;&#13;
     console.log(obj);&#13;
   &lt;/script&gt;&#13;
 &lt;/body&gt;&#13;
```&#13;
&#13;
- 其他操作&#13;
&#13;
- `obj[a] = 1`&#13;
&#13;
赋值操作有两种&#13;
&#13;
```&#13;
 obj.name = '张三'`&#13;
 `obj['address'] = '安徽省'&#13;
```&#13;
&#13;
第二种，方括号里面只能是 `字符串`&#13;
&#13;
- Object.assign(a, b)  对象转移——深拷贝，将 b 的对象属性给 a，但是 a 接下来继续新增属性，b 不会增加&#13;
&#13;
- 直接等  是浅拷贝，同样情况下， b 会增加&#13;
&#13;
```javascript&#13;
 // 两种深拷贝例子和一个浅拷贝例子&#13;
 let teacher = {};  // 新的对象, 老师&#13;
 Object.assign(teacher, user);  // 深拷贝&#13;
 console.log('================');&#13;
 console.log(teacher);&#13;
 &#13;
 teacher.birth = '1993.10.01';&#13;
 console.log('================teacher=======');&#13;
 console.log(teacher);&#13;
 console.log('================user=======');&#13;
 console.log(user);&#13;
 &#13;
 let teacher1 = Object.assign({}, user);&#13;
 &#13;
 let teacher2 = user;  // 浅拷贝&#13;
 teacher2.xxx = '哈哈哈哈';&#13;
 console.log('================teacher2=======');&#13;
 console.log(teacher2);&#13;
 console.log('================user=======');&#13;
 console.log(user);&#13;
 &#13;
 &#13;
 let userStr = JSON.stringify(user);&#13;
 let teacher3 = JSON.parse(userStr);  // 深拷贝&#13;
 teacher3.yyyy = '哈哈哈';&#13;
 console.log('================teacher3=======');&#13;
 console.log(teacher3);&#13;
 console.log('================user=======');&#13;
 console.log(user);&#13;
```&#13;
&#13;
- `let {name} = user`    解构语法&#13;
&#13;
```javascript&#13;
 console.log('================user拿出一个属性=======');&#13;
 console.log(user.name);&#13;
 console.log(user['name']);&#13;
 &#13;
 let { name } = user;&#13;
 console.log('================解构语法=======');&#13;
 console.log(name);&#13;
```&#13;
&#13;
- ?.  —— 安全访问数据的方式&#13;
&#13;
- `b = a?.name` a 是 `undefined`或者 `null`，b 不报错，其他清空都会报错   &#13;
&#13;
- ?? —— `b = a ?? c`  a 是 `undefined` 或者 `null` 则赋值 c 给 b&#13;
- ||  —— `b = a || c` a 是 `undefined`或者 `null`，则取 c&#13;
- ??= —— `b ??= a` 左侧是 `undefined`或者 `null`，则取右侧的值&#13;
&#13;
```javascript&#13;
 let jsonObj = {1: 'a', 2: 'b'}&#13;
 console.log(jsonObj[1])  // a&#13;
 // 只能这样访问&#13;
 &#13;
 // == 只比较值，不比较类型&#13;
 // === 都比较&#13;
 &#13;
 // 我们也可以将该对象的属性进行操作&#13;
 let jsObj = { 1: 'a', 2: 'b' };&#13;
 console.log(jsObj[1]);  // 在 JavaScript 中，对象的键总是以字符串形式存储的，即使你在定义时使用了数字，其实在内部是这样的：let jsObj = { '1': 'a', '2': 'b' };&#13;
 &#13;
 // forin结构  对象循环 动态修改 value的值&#13;
 for (const key in jsObj) {&#13;
   jsObj[key] = jsObj[key] + '123';&#13;
   // console.log(key + '=' + jsObj[key])&#13;
   if (key == '1') {&#13;
     jsObj[key] = jsObj[key] + '123' + '青哥哥好帅啊';&#13;
   }&#13;
 }&#13;
 &#13;
 console.log(jsObj);&#13;
```&#13;
&#13;
## 数组操作&#13;
&#13;
### 数组的增删改查&#13;
&#13;
- 创建数组 `let arr = []`&#13;
- 新增元素 &#13;
    - `arr[0] = 1`    `arr[2] = 3`&#13;
    - `push()`&#13;
    - `unshift()`&#13;
- 删除元素&#13;
    - `splice()`&#13;
    - `pop()`&#13;
    - `shift()`&#13;
&#13;
- 修改元素 `arr[index] = 1`&#13;
- 查询元素 `arr[index]`&#13;
- 截取元素 `slice()`&#13;
- 合并数组 `concat()`&#13;
&#13;
- 字符串变数组 `split()`&#13;
- 数组变字符串  `join()` 默认使用 , 分割&#13;
- 排序 `sort()` **有坑**  [1, 2, 10] -&gt; [1, 10, 2]&#13;
- 倒序 `reverse()`&#13;
- 获取元素序号 `indexOf()`  `lastIndexOf()`&#13;
- 【神器】 `filter()` 可以筛选和删除元素&#13;
- 【神器】`find()`&#13;
- `map`&#13;
- `forEach([item], [index])`&#13;
- reduce&#13;
    - 语法：`arr.reduce(function(pre, current, index, arr){...}, init);`&#13;
    - pre累积器累计回调的返回值，表示上一次调用回调时的返回值，或者初始值 init&#13;
    - cur表示当前正在处理的数组元素&#13;
    - index表示当前正在处理的数组元素的索引&#13;
    - arr 表示原数组&#13;
    - init 初始值&#13;
&#13;
```javascript&#13;
let arr3 = [2,3];&#13;
let arr4 = [1,4];&#13;
let arr5 = arr3.concat(arr4);&#13;
console.log(arr5);&#13;
&#13;
let str = '青哥哥讲课，真的很干啊啊啊';&#13;
console.log(str.split('，'));&#13;
&#13;
let arrB = [1,2,3,4];&#13;
console.log(arrB.join('| | |'));  // 数字数组变成了字符串&#13;
&#13;
let sortArr = [1,2,10,8,6,22,11];&#13;
let newSortArr = sortArr.sort((a,b) =&gt; a-b);  // unicode编码排序&#13;
console.log(newSortArr);  // [1,2,10] =&gt; [1, 10, 2]&#13;
&#13;
let reverseArr = [1,2,10,8,6,22,11];&#13;
console.log(reverseArr.reverse());&#13;
console.log(reverseArr.sort((a,b) =&gt; b-a));  // 完美的倒序方法&#13;
&#13;
let indexArr = [1,2,3];&#13;
console.log(indexArr.indexOf(3));  // 2  没有的时候是 -1  有这个元素就从 0 开始编号&#13;
&#13;
&#13;
&#13;
&lt;script&gt;&#13;
  let users = [ { name: '张三', age: 20 }, { name: '李四', age: 21 }, { name: '王二', age: 22 } ]&#13;
  let newUsers = []&#13;
  users.forEach(aaa =&gt; {&#13;
    if (aaa.age &gt; 20) {&#13;
      newUsers.push(aaa)&#13;
    }&#13;
  })&#13;
  console.log(newUsers)&#13;
&#13;
  let newUsers1 = users.filter(aaa =&gt; aaa.age &gt; 20 &amp;&amp; aaa.name.includes('李'))&#13;
  console.log(newUsers1)&#13;
&#13;
  // 删除数组的某一项&#13;
  // let inx&#13;
  // users.forEach((item, index) =&gt; {&#13;
  //   if (item.name === '李四') {&#13;
  //     inx = index&#13;
  //   }&#13;
  // })&#13;
  // users.splice(inx, 1)&#13;
  // console.log(users)&#13;
&#13;
  let newArr = users.filter(v =&gt; v.name !== '李四' &amp;&amp; v.name !== '王二')  // 删除数组的指定元素  是不是很舒服&#13;
  console.log('=======filter删除后=======')&#13;
  console.log(newArr)&#13;
&lt;/script&gt;&#13;
&#13;
&#13;
let lisi = users.find(v =&gt; v.name === '李四')&#13;
console.log(lisi)&#13;
&#13;
let lisiIndex = users.findIndex(v =&gt; v.name === '张三')&#13;
console.log(lisiIndex)&#13;
&#13;
&#13;
let names = users.map(v =&gt; v.name)&#13;
console.log(names)&#13;
&#13;
// 这段代码展示了 reduce 方法的两种用法：&#13;
&#13;
//计算 users 数组中所有用户年龄的总和，并加上 10 的偏移量。</description><guid isPermaLink="true">https://Carolynhomes.github.io/Carolynhomes/post/02-JS-kuai-su-ru-men.html</guid><pubDate>Sun, 03 Nov 2024 04:30:48 +0000</pubDate></item><item><title>01-HTML、CSS布局快速入门</title><link>https://Carolynhomes.github.io/Carolynhomes/post/01-HTML%E3%80%81CSS-bu-ju-kuai-su-ru-men.html</link><description># 学习资源&#13;
&#13;
- HTML： https://www.runoob.com/html/html-tutorial.html&#13;
- CSS： https://www.runoob.com/css/css-tutorial.html&#13;
- Vue： https://www.runoob.com/vue2/vue-tutorial.html&#13;
&#13;
# HTML&#13;
&#13;
- div&#13;
- span&#13;
- h1-h6&#13;
- i&#13;
- strong&#13;
- a&#13;
- img&#13;
- video&#13;
- input&#13;
- textarea&#13;
- button&#13;
&#13;
![image](https://github.com/user-attachments/assets/e28ac798-17da-4ebe-84b2-7096b1411804)&#13;
&#13;
# CSS 布局思路&#13;
&#13;
```&#13;
box-sizing: border-box;` 定义如何计算一个元素的总宽度和总高度，主要设置是否需要加上内边距(padding) 和边框等。</description><guid isPermaLink="true">https://Carolynhomes.github.io/Carolynhomes/post/01-HTML%E3%80%81CSS-bu-ju-kuai-su-ru-men.html</guid><pubDate>Sun, 03 Nov 2024 04:01:59 +0000</pubDate></item><item><title>快速搭建一个Github个人页面</title><link>https://Carolynhomes.github.io/Carolynhomes/post/kuai-su-da-jian-yi-ge-Github-ge-ren-ye-mian.html</link><description>&gt; 啊没错，就是搭建我现在这个，5分钟不到，搞定~&#13;
&#13;
# 自己操作步骤&#13;
$\textcolor{red}{我还是建议看视频的，很详细}$&#13;
&#13;
1. 【创建仓库】点击[通过模板创建仓库](https://github.com/new?template_name=Gmeek-template&amp;template_owner=Meekdai)，建议仓库名称为XXX.github.io，其中XXX为你的github用户名。</description><guid isPermaLink="true">https://Carolynhomes.github.io/Carolynhomes/post/kuai-su-da-jian-yi-ge-Github-ge-ren-ye-mian.html</guid><pubDate>Sun, 03 Nov 2024 02:21:30 +0000</pubDate></item><item><title>转来第一篇</title><link>https://Carolynhomes.github.io/Carolynhomes/post/zhuan-lai-di-yi-pian.html</link><description>啊啊啊啊，如果能免费，如果容量足够大，那自然最好了！！！！！(白嫖心理)。</description><guid isPermaLink="true">https://Carolynhomes.github.io/Carolynhomes/post/zhuan-lai-di-yi-pian.html</guid><pubDate>Sat, 02 Nov 2024 16:51:33 +0000</pubDate></item></channel></rss>