<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0"><channel><title>牧天白衣</title><link>https://Carolynhomes.github.io/Carolynhomes</link><description>哎，今天又是美好的一天哟！！！！！</description><copyright>牧天白衣</copyright><docs>http://www.rssboard.org/rss-specification</docs><generator>python-feedgen</generator><image><url>https://github.githubassets.com/favicons/favicon.svg</url><title>avatar</title><link>https://Carolynhomes.github.io/Carolynhomes</link></image><lastBuildDate>Sat, 18 Jan 2025 01:48:17 +0000</lastBuildDate><managingEditor>牧天白衣</managingEditor><ttl>60</ttl><webMaster>牧天白衣</webMaster><item><title>P1009 [NOIP1998 普及组] 阶乘之和</title><link>https://Carolynhomes.github.io/Carolynhomes/post/P1009%20%5BNOIP1998%20-pu-ji-zu-%5D%20-jie-cheng-zhi-he.html</link><description>**不需要考虑精度，因为python就是高精度的，如果是C之类的，得需要考虑数组来储存数字了**
```python
n = int(input())
res = 0

def factorial(n):
    multiply = 1
    while n != 1:
        multiply *= n
        n -= 1
    return multiply

for i in range(1, n+1):
    res += factorial(i)

print(res)      。</description><guid isPermaLink="true">https://Carolynhomes.github.io/Carolynhomes/post/P1009%20%5BNOIP1998%20-pu-ji-zu-%5D%20-jie-cheng-zhi-he.html</guid><pubDate>Sat, 18 Jan 2025 01:47:52 +0000</pubDate></item><item><title>P5721 【深基4.例6】数字直角三角形</title><link>https://Carolynhomes.github.io/Carolynhomes/post/P5721%20%E3%80%90-shen-ji-4.-li-6%E3%80%91-shu-zi-zhi-jiao-san-jiao-xing.html</link><description>```python
n = int(input())
data = 1

for i in range(n, 0, -1):
    for j in range(i):
        if 0 &lt; data &lt; 10:
            print(f'0{data}', end='')
        else:
            print(f'{data}', end='')
        data += 1
    print()。</description><guid isPermaLink="true">https://Carolynhomes.github.io/Carolynhomes/post/P5721%20%E3%80%90-shen-ji-4.-li-6%E3%80%91-shu-zi-zhi-jiao-san-jiao-xing.html</guid><pubDate>Sat, 18 Jan 2025 01:44:13 +0000</pubDate></item><item><title>P5720 【深基4.例4】一尺之棰</title><link>https://Carolynhomes.github.io/Carolynhomes/post/P5720%20%E3%80%90-shen-ji-4.-li-4%E3%80%91-yi-chi-zhi-chui.html</link><description>```python
a = int(input())
day = 1

while a != 1:
    a //= 2
    day += 1

print(day)。</description><guid isPermaLink="true">https://Carolynhomes.github.io/Carolynhomes/post/P5720%20%E3%80%90-shen-ji-4.-li-4%E3%80%91-yi-chi-zhi-chui.html</guid><pubDate>Sat, 18 Jan 2025 01:22:52 +0000</pubDate></item><item><title>P5719 【深基4.例3】分类平均</title><link>https://Carolynhomes.github.io/Carolynhomes/post/P5719%20%E3%80%90-shen-ji-4.-li-3%E3%80%91-fen-lei-ping-jun.html</link><description>```python
n, k = map(int, input().split())
res1, count1 = 0, 0
res2, count2 = 0, 0

for i in range(1, n+1):
    if i % k == 0:
        res1 += i
        count1 += 1
    else:
        res2 += i
        count2 += 1

ans1 = f'{res1/count1:.1f}'
ans2 = f'{res2/count2:.1f}'

print(ans1, ans2)。</description><guid isPermaLink="true">https://Carolynhomes.github.io/Carolynhomes/post/P5719%20%E3%80%90-shen-ji-4.-li-3%E3%80%91-fen-lei-ping-jun.html</guid><pubDate>Fri, 17 Jan 2025 23:39:36 +0000</pubDate></item><item><title>P5718 【深基4.例2】找最小值</title><link>https://Carolynhomes.github.io/Carolynhomes/post/P5718%20%E3%80%90-shen-ji-4.-li-2%E3%80%91-zhao-zui-xiao-zhi.html</link><description>```python
n = int(input())
content = [int(x) for x in input().split()]

res = min(content)
print(res)。</description><guid isPermaLink="true">https://Carolynhomes.github.io/Carolynhomes/post/P5718%20%E3%80%90-shen-ji-4.-li-2%E3%80%91-zhao-zui-xiao-zhi.html</guid><pubDate>Fri, 17 Jan 2025 23:35:30 +0000</pubDate></item><item><title>P1055 [NOIP2008 普及组] ISBN 号码</title><link>https://Carolynhomes.github.io/Carolynhomes/post/P1055%20%5BNOIP2008%20-pu-ji-zu-%5D%20ISBN%20-hao-ma.html</link><description>```python
isbn_number = [str(x) for x in input().strip()]
counter = 1

res = isbn_number[len(isbn_number)-1]
isbn_number = isbn_number[0:len(isbn_number)-1]

ans = 0
for character in isbn_number:
    if character == '-':
        continue
    ans = (ans + int(character) * counter % 11) % 11
    counter += 1

if ans == 10:
    ans = 'X'
else:
    ans = str(ans)

if res == ans:
    print('Right')
else:
    print(''.join(isbn_number), str(ans), sep='')。</description><guid isPermaLink="true">https://Carolynhomes.github.io/Carolynhomes/post/P1055%20%5BNOIP2008%20-pu-ji-zu-%5D%20ISBN%20-hao-ma.html</guid><pubDate>Fri, 17 Jan 2025 23:28:59 +0000</pubDate></item><item><title>P4414 [COCI2006-2007#2] ABC</title><link>https://Carolynhomes.github.io/Carolynhomes/post/P4414%20%5BCOCI2006-2007%232%5D%20ABC.html</link><description>```python
content = [int(x) for x in input().split()]
pattern = [str(x) for x in input().strip()]

# content = list(map(int, input().split()))
# pattern = input().strip()

res = ''

content.sort()
dict_content = {'A': content[0], 'B': content[1], 'C': content[2]}


for i in pattern:
    print(dict_content[i], end=' ')
。</description><guid isPermaLink="true">https://Carolynhomes.github.io/Carolynhomes/post/P4414%20%5BCOCI2006-2007%232%5D%20ABC.html</guid><pubDate>Fri, 17 Jan 2025 12:36:38 +0000</pubDate></item><item><title>P1046 [NOIP2005 普及组] 陶陶摘苹果</title><link>https://Carolynhomes.github.io/Carolynhomes/post/P1046%20%5BNOIP2005%20-pu-ji-zu-%5D%20-tao-tao-zhai-ping-guo.html</link><description>```python

content = list(map(int, input().split()))
height = int(input())

chain_height = 30
counter = 0

border = height + chain_height
for i in content:
    if i &lt;= border:
        counter += 1

print(counter)
。</description><guid isPermaLink="true">https://Carolynhomes.github.io/Carolynhomes/post/P1046%20%5BNOIP2005%20-pu-ji-zu-%5D%20-tao-tao-zhai-ping-guo.html</guid><pubDate>Fri, 17 Jan 2025 09:39:47 +0000</pubDate></item><item><title>P1888 三角函数</title><link>https://Carolynhomes.github.io/Carolynhomes/post/P1888%20-san-jiao-han-shu.html</link><description>```python
def gcd(a, b):
    '''求最大公约数'''
    c = a % b
    if c == 0:
        return b
    return gcd(b, c)

a, b, c = map(int, input().split())
a, b, c = sorted([a, b, c])
fenzi = a // gcd(c, a)
fenmu = c // gcd(c, a)
print(f'{fenzi}/{fenmu}')
。</description><guid isPermaLink="true">https://Carolynhomes.github.io/Carolynhomes/post/P1888%20-san-jiao-han-shu.html</guid><pubDate>Fri, 17 Jan 2025 09:29:31 +0000</pubDate></item><item><title>P1424 小鱼的航程（改进版）</title><link>https://Carolynhomes.github.io/Carolynhomes/post/P1424%20-xiao-yu-de-hang-cheng-%EF%BC%88-gai-jin-ban-%EF%BC%89.html</link><description>```python
x, n = map(int, input().split())
total = 0
for i in range(1, n+1):
    if x == 6 or x == 7:
        total += 0
    else:
        total += 250
    
    x += 1
    if x == 8:
        x = 1

print(total)
。</description><guid isPermaLink="true">https://Carolynhomes.github.io/Carolynhomes/post/P1424%20-xiao-yu-de-hang-cheng-%EF%BC%88-gai-jin-ban-%EF%BC%89.html</guid><pubDate>Fri, 17 Jan 2025 09:17:09 +0000</pubDate></item><item><title>P1422 小玉家的电费</title><link>https://Carolynhomes.github.io/Carolynhomes/post/P1422%20-xiao-yu-jia-de-dian-fei.html</link><description>```python
usage = int(input())
expense = 0
if usage &lt;= 150:
	expense = 0.4463 * usage
elif 151 &lt;= usage &lt;= 400:
	expense = 0.4463 * 150 + (usage - 150) * 0.4663
else:
	expense = 0.4463  * 150 + 250 * 0.4663 + (usage - 400) * 0.5663

print(f'{expense:.1f}')。</description><guid isPermaLink="true">https://Carolynhomes.github.io/Carolynhomes/post/P1422%20-xiao-yu-jia-de-dian-fei.html</guid><pubDate>Fri, 17 Jan 2025 08:06:52 +0000</pubDate></item><item><title>P5717 【深基3.习8】三角形分类</title><link>https://Carolynhomes.github.io/Carolynhomes/post/P5717%20%E3%80%90-shen-ji-3.-xi-8%E3%80%91-san-jiao-xing-fen-lei.html</link><description>```python
a, b, c = map(int, input().split())

edge = sorted([a, b, c])
a, b, c = edge  # 这样分配给从小到大的三个元素

if a + b  &lt;= c and c - b &gt;= a:
	print('Not triangle')
else:
    if a**2 + b**2 == c**2:
        print('Right triangle')

    if a**2 + b**2 &gt; c**2:
        print('Acute triangle')

    if a**2 + b**2 &lt; c**2:
        print('Obtuse triangle')

    if a == b or b == c or a == c:
        print('Isosceles triangle')

    if a == c and b == c:
        print('Equilateral triangle')
。</description><guid isPermaLink="true">https://Carolynhomes.github.io/Carolynhomes/post/P5717%20%E3%80%90-shen-ji-3.-xi-8%E3%80%91-san-jiao-xing-fen-lei.html</guid><pubDate>Fri, 17 Jan 2025 06:36:33 +0000</pubDate></item><item><title>P1909 [NOIP2016 普及组] 买铅笔</title><link>https://Carolynhomes.github.io/Carolynhomes/post/P1909%20%5BNOIP2016%20-pu-ji-zu-%5D%20-mai-qian-bi.html</link><description>```python
n = int(input())
total = 0
min = 10000000
for i in range(3):
	amount, price = map(int, input().split())
	if n % amount == 0:
		number = n // amount
	else:
		number = int(n / amount) + 1

	total = number * price
	if total &lt; min:
		min = total

print(min)
。</description><guid isPermaLink="true">https://Carolynhomes.github.io/Carolynhomes/post/P1909%20%5BNOIP2016%20-pu-ji-zu-%5D%20-mai-qian-bi.html</guid><pubDate>Fri, 17 Jan 2025 04:27:31 +0000</pubDate></item><item><title>P1085 [NOIP2004 普及组] 不高兴的津津</title><link>https://Carolynhomes.github.io/Carolynhomes/post/P1085%20%5BNOIP2004%20-pu-ji-zu-%5D%20-bu-gao-xing-de-jin-jin.html</link><description>```python
max, res, day = 0, 0, 0
for i in range(1, 8):
	time1, time2 = map(int, input().split())
	res = time1 + time2
	if res &gt; max:
	    max = res
	    day = i

if max &lt;= 8:
	print(0)
else:
	print(day)

。</description><guid isPermaLink="true">https://Carolynhomes.github.io/Carolynhomes/post/P1085%20%5BNOIP2004%20-pu-ji-zu-%5D%20-bu-gao-xing-de-jin-jin.html</guid><pubDate>Fri, 17 Jan 2025 04:03:15 +0000</pubDate></item><item><title>P5716 【深基3.例9】月份天数</title><link>https://Carolynhomes.github.io/Carolynhomes/post/P5716%20%E3%80%90-shen-ji-3.-li-9%E3%80%91-yue-fen-tian-shu.html</link><description>```python
y, m = map(int, input().split())
# y, m = 2000, 2

list_special = [0, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]
list_normal = [0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]

def is_special(year):
	if year % 4 == 0 and year % 100 != 0 or year % 400 == 0:
		return list_special
	else:
		return list_normal

month_of_year = is_special(y)
print(month_of_year[m])。</description><guid isPermaLink="true">https://Carolynhomes.github.io/Carolynhomes/post/P5716%20%E3%80%90-shen-ji-3.-li-9%E3%80%91-yue-fen-tian-shu.html</guid><pubDate>Fri, 17 Jan 2025 03:45:59 +0000</pubDate></item><item><title>P5715 【深基3.例8】三位数排序</title><link>https://Carolynhomes.github.io/Carolynhomes/post/P5715%20%E3%80%90-shen-ji-3.-li-8%E3%80%91-san-wei-shu-pai-xu.html</link><description>```python
a, b, c= map(int, input().split())
# a, b, c = 1, 14, 5
temp = [a, b, c]

res = sorted(temp)
a, b, c = res

print(a, b, c)

。</description><guid isPermaLink="true">https://Carolynhomes.github.io/Carolynhomes/post/P5715%20%E3%80%90-shen-ji-3.-li-8%E3%80%91-san-wei-shu-pai-xu.html</guid><pubDate>Fri, 17 Jan 2025 03:38:32 +0000</pubDate></item><item><title>P5714 【深基3.例7】肥胖问题</title><link>https://Carolynhomes.github.io/Carolynhomes/post/P5714%20%E3%80%90-shen-ji-3.-li-7%E3%80%91-fei-pang-wen-ti.html</link><description>```python

m, h = map(float, input().split())
# m, h = 100, 1.68
res = m / (h*h)
if res &lt; 18.5:
	print('Underweight')
elif 18.5 &lt;= res &lt; 24:
	print('Normal')
else:
	print(f'{res:.6g}')
	print('Overweight')。</description><guid isPermaLink="true">https://Carolynhomes.github.io/Carolynhomes/post/P5714%20%E3%80%90-shen-ji-3.-li-7%E3%80%91-fei-pang-wen-ti.html</guid><pubDate>Fri, 17 Jan 2025 03:31:22 +0000</pubDate></item><item><title>P5713 【深基3.例5】洛谷团队系统</title><link>https://Carolynhomes.github.io/Carolynhomes/post/P5713%20%E3%80%90-shen-ji-3.-li-5%E3%80%91-luo-gu-tuan-dui-xi-tong.html</link><description>```python
n = int(input())
# n = 50
local_time = 5 * n
luogu_time = 11 + 3 * n

res = local_time if local_time &lt; luogu_time else luogu_time
ans = 'Local' if res == local_time else 'Luogu'
print(ans)。</description><guid isPermaLink="true">https://Carolynhomes.github.io/Carolynhomes/post/P5713%20%E3%80%90-shen-ji-3.-li-5%E3%80%91-luo-gu-tuan-dui-xi-tong.html</guid><pubDate>Fri, 17 Jan 2025 03:09:14 +0000</pubDate></item><item><title>P5712 【深基3.例4】Apples</title><link>https://Carolynhomes.github.io/Carolynhomes/post/P5712%20%E3%80%90-shen-ji-3.-li-4%E3%80%91Apples.html</link><description>```python
x = int(input())
# x = 3
if x == 0 or x == 1:
	print(f'Today, I ate {x} apple.')
else:
	print(f'Today, I ate {x} apples.')。</description><guid isPermaLink="true">https://Carolynhomes.github.io/Carolynhomes/post/P5712%20%E3%80%90-shen-ji-3.-li-4%E3%80%91Apples.html</guid><pubDate>Fri, 17 Jan 2025 02:56:11 +0000</pubDate></item><item><title>P5711 【深基3.例3】闰年判断</title><link>https://Carolynhomes.github.io/Carolynhomes/post/P5711%20%E3%80%90-shen-ji-3.-li-3%E3%80%91-run-nian-pan-duan.html</link><description>```python
n = int(input())
# n = 1900
if n % 4 == 0 and n % 100 != 0 or n % 400 == 0:
	print(1)
else:
	print(0)

```。</description><guid isPermaLink="true">https://Carolynhomes.github.io/Carolynhomes/post/P5711%20%E3%80%90-shen-ji-3.-li-3%E3%80%91-run-nian-pan-duan.html</guid><pubDate>Fri, 17 Jan 2025 02:54:10 +0000</pubDate></item><item><title>P5703 【深基2.例5】苹果采购</title><link>https://Carolynhomes.github.io/Carolynhomes/post/P5703%20%E3%80%90-shen-ji-2.-li-5%E3%80%91-ping-guo-cai-gou.html</link><description>```python
avg_amount, student_amount = map(int, input().split())
print(avg_amount * student_amount)
```。</description><guid isPermaLink="true">https://Carolynhomes.github.io/Carolynhomes/post/P5703%20%E3%80%90-shen-ji-2.-li-5%E3%80%91-ping-guo-cai-gou.html</guid><pubDate>Thu, 16 Jan 2025 14:44:03 +0000</pubDate></item><item><title>P5704 【深基2.例6】字母转换</title><link>https://Carolynhomes.github.io/Carolynhomes/post/P5704%20%E3%80%90-shen-ji-2.-li-6%E3%80%91-zi-mu-zhuan-huan.html</link><description>```python
test_str = input()
print(test_str.upper())
```。</description><guid isPermaLink="true">https://Carolynhomes.github.io/Carolynhomes/post/P5704%20%E3%80%90-shen-ji-2.-li-6%E3%80%91-zi-mu-zhuan-huan.html</guid><pubDate>Thu, 16 Jan 2025 14:43:36 +0000</pubDate></item><item><title>P5705 【深基2.例7】数字反转</title><link>https://Carolynhomes.github.io/Carolynhomes/post/P5705%20%E3%80%90-shen-ji-2.-li-7%E3%80%91-shu-zi-fan-zhuan.html</link><description>```python
input_float = str(input())
# input_float = 'abc'
reverse_str = input_float[::-1]
output_float = float(reverse_str)
print(output_float)
```。</description><guid isPermaLink="true">https://Carolynhomes.github.io/Carolynhomes/post/P5705%20%E3%80%90-shen-ji-2.-li-7%E3%80%91-shu-zi-fan-zhuan.html</guid><pubDate>Thu, 16 Jan 2025 14:43:16 +0000</pubDate></item><item><title>P5706 【深基2.例8】再分肥宅水</title><link>https://Carolynhomes.github.io/Carolynhomes/post/P5706%20%E3%80%90-shen-ji-2.-li-8%E3%80%91-zai-fen-fei-zhai-shui.html</link><description>```python
t, n = input().split()
t = float(t)
n = int(n)

print('{:.3f}'.format(t / n))
print(n * 2)
```。</description><guid isPermaLink="true">https://Carolynhomes.github.io/Carolynhomes/post/P5706%20%E3%80%90-shen-ji-2.-li-8%E3%80%91-zai-fen-fei-zhai-shui.html</guid><pubDate>Thu, 16 Jan 2025 14:42:54 +0000</pubDate></item><item><title>P5708 【深基2.习2】三角形面积</title><link>https://Carolynhomes.github.io/Carolynhomes/post/P5708%20%E3%80%90-shen-ji-2.-xi-2%E3%80%91-san-jiao-xing-mian-ji.html</link><description>```python
a, b, c = map(float, input().split())
p = (a + b + c) / 2

area = (p * (p - a) * (p - b) * (p - c)) ** 0.5
print('{:.1f}'.format(area))

```。</description><guid isPermaLink="true">https://Carolynhomes.github.io/Carolynhomes/post/P5708%20%E3%80%90-shen-ji-2.-xi-2%E3%80%91-san-jiao-xing-mian-ji.html</guid><pubDate>Thu, 16 Jan 2025 14:42:28 +0000</pubDate></item><item><title>P5707 【深基2.例12】上学迟到</title><link>https://Carolynhomes.github.io/Carolynhomes/post/P5707%20%E3%80%90-shen-ji-2.-li-12%E3%80%91-shang-xue-chi-dao.html</link><description>```python
s, v = map(int, input().split())
# s, v = 100, 0.3
t = 10
hour, minutes = 0, 0

if s % v == 0:
	t += s // v
else:
	t += s // v + 1

# 接下来，计算时分
for i in range(1, 100):
	if i * 60 &gt; t:
		minutes = str(int(i * 60 - t))
		if 0 &lt;= int(minutes) &lt; 10:
			minutes = '0' + minutes 

		hour = str((8 - i + 24) % 24)
		if 0 &lt;= int(hour) &lt; 10:
			hour = '0' + hour 

		break
	else:
		continue


time = str(hour) + ':' + str(minutes)
print(time)
```。</description><guid isPermaLink="true">https://Carolynhomes.github.io/Carolynhomes/post/P5707%20%E3%80%90-shen-ji-2.-li-12%E3%80%91-shang-xue-chi-dao.html</guid><pubDate>Thu, 16 Jan 2025 14:42:00 +0000</pubDate></item><item><title>B2029 大象喝水</title><link>https://Carolynhomes.github.io/Carolynhomes/post/B2029%20-da-xiang-he-shui.html</link><description>```python
h, r = map(int, input().split())
# h, r = 23, 11
pai = 3.14

V = pai * r * r * h
if (20 * 1000) % V == 0:
	amount = 20 * 1000 // V
else:
	amount = 20 * 1000 // V + 1

print(int(amount))
```。</description><guid isPermaLink="true">https://Carolynhomes.github.io/Carolynhomes/post/B2029%20-da-xiang-he-shui.html</guid><pubDate>Thu, 16 Jan 2025 14:41:34 +0000</pubDate></item><item><title>P1425 小鱼的游泳时间</title><link>https://Carolynhomes.github.io/Carolynhomes/post/P1425%20-xiao-yu-de-you-yong-shi-jian.html</link><description>```python
a, b, c, d = map(int, input().split())
# a, b, c, d = 12,50,19 ,10
previous = a * 60 + b
later = c * 60 + d

distance = later - previous
minute = distance % 60
hour = (distance - minute) / 60

print(int(hour), int(minute))
```。</description><guid isPermaLink="true">https://Carolynhomes.github.io/Carolynhomes/post/P1425%20-xiao-yu-de-you-yong-shi-jian.html</guid><pubDate>Thu, 16 Jan 2025 14:41:10 +0000</pubDate></item><item><title>P1421 小玉买文具</title><link>https://Carolynhomes.github.io/Carolynhomes/post/P1421%20-xiao-yu-mai-wen-ju.html</link><description>```python
a, b = map(int, input().split())
# a, b = 10, 3

bid_price = 19
total_money = a * 10 + b

res = total_money // bid_price
print(res)
```。</description><guid isPermaLink="true">https://Carolynhomes.github.io/Carolynhomes/post/P1421%20-xiao-yu-mai-wen-ju.html</guid><pubDate>Thu, 16 Jan 2025 14:40:49 +0000</pubDate></item><item><title>P3954 [NOIP2017 普及组] 成绩</title><link>https://Carolynhomes.github.io/Carolynhomes/post/P3954%20%5BNOIP2017%20-pu-ji-zu-%5D%20-cheng-ji.html</link><description>```python
a, b, c = map(int, input().split())
# a, b, c = 60, 90, 80 

res = 0.2 * a + 0.3 * b + 0.5 * c

print(int(res))
```。</description><guid isPermaLink="true">https://Carolynhomes.github.io/Carolynhomes/post/P3954%20%5BNOIP2017%20-pu-ji-zu-%5D%20-cheng-ji.html</guid><pubDate>Thu, 16 Jan 2025 14:40:27 +0000</pubDate></item><item><title>P5710 【深基3.例2】数的性质</title><link>https://Carolynhomes.github.io/Carolynhomes/post/P5710%20%E3%80%90-shen-ji-3.-li-2%E3%80%91-shu-de-xing-zhi.html</link><description>```python
x = int(input())
# x = 12
condition1 = x % 2 == 0
condition2 = 4 &lt; x &lt;= 12
res1, res2, res3, res4 = 0, 0, 0, 0

if condition1 and condition2:
	res1 = 1

if condition1 or condition2:
	res2 = 1
else:
	res4 = 1

if condition1 and not condition2 or condition2 and not condition1:
	res3 = 1


print(res1, res2, res3, res4)
```。</description><guid isPermaLink="true">https://Carolynhomes.github.io/Carolynhomes/post/P5710%20%E3%80%90-shen-ji-3.-li-2%E3%80%91-shu-de-xing-zhi.html</guid><pubDate>Thu, 16 Jan 2025 14:39:37 +0000</pubDate></item><item><title>P5709 【深基2.习6】Apples Prologue / 苹果和虫子</title><link>https://Carolynhomes.github.io/Carolynhomes/post/P5709%20%E3%80%90-shen-ji-2.-xi-6%E3%80%91Apples%20Prologue%20-%20-ping-guo-he-chong-zi.html</link><description>**这个题注意事项只有，t=0的情况和res是负数的情况**
```python
m, t, s = map(int, input().split())

if t == 0:
	res = 0
else:
	have_eaten = s // t if s % t == 0 else s // t + 1
	res = m - have_eaten
	if res &lt;= 0:
		res = 0
		
print(res)
```。</description><guid isPermaLink="true">https://Carolynhomes.github.io/Carolynhomes/post/P5709%20%E3%80%90-shen-ji-2.-xi-6%E3%80%91Apples%20Prologue%20-%20-ping-guo-he-chong-zi.html</guid><pubDate>Thu, 16 Jan 2025 14:33:04 +0000</pubDate></item><item><title>P2433 【深基1-2】小学数学 N 合一</title><link>https://Carolynhomes.github.io/Carolynhomes/post/P2433%20%E3%80%90-shen-ji-1-2%E3%80%91-xiao-xue-shu-xue-%20N%20-he-yi.html</link><description>**我真的服了，不知道为什么，加上保留小数，才能AC**
```python
question_no = int(input())
# question_no = 11
# 6 7 8 11
if question_no == 1:
	print('I love Luogu!')
elif question_no == 2:
	print('6 4')
elif question_no == 3:
	print(3)
	print(12)
	print(2)
elif question_no == 4:
	print('{:.3f}'.format(500/3))
	# print(166.666666)
elif question_no == 5:
	print(15)
elif question_no == 6:
	print('{:.4f}'.format((6*6+9*9)**0.5))
elif question_no == 7:
	print(110)
	print(90)
	print(0)
elif question_no == 8:
	r = 5
	pai = 3.141593
	print('{:.4f}'.format(2 * pai * r))
	print('{:.4f}'.format(pai * r * r))
	print('{:.3f}'.format(4/3 * pai * r * r * r))
elif question_no == 9:
	print(22)
elif question_no == 10:
	print(9)
elif question_no == 11:
	print('{:.4f}'.format(100/3))
elif question_no == 12:
	print(ord('M')-ord('A') + 1)
	print(chr(65+17))
elif question_no == 13:
	r1, r2 = 4, 10
	pai = 3.141593
	V = 4/3 * pai * (r1 ** 3) + 4/3 * pai * (r2 ** 3)
	egde_length = int(V ** (1/3))
	print(egde_length)
else:
	print(50)
。</description><guid isPermaLink="true">https://Carolynhomes.github.io/Carolynhomes/post/P2433%20%E3%80%90-shen-ji-1-2%E3%80%91-xiao-xue-shu-xue-%20N%20-he-yi.html</guid><pubDate>Thu, 16 Jan 2025 13:52:04 +0000</pubDate></item><item><title>kimi----英语文献及公式转换提示词</title><link>https://Carolynhomes.github.io/Carolynhomes/post/kimi-----ying-yu-wen-xian-ji-gong-shi-zhuan-huan-ti-shi-ci.html</link><description>你是智能图片翻译助手，具备OCR识别和LaTeX转换能力。</description><guid isPermaLink="true">https://Carolynhomes.github.io/Carolynhomes/post/kimi-----ying-yu-wen-xian-ji-gong-shi-zhuan-huan-ti-shi-ci.html</guid><pubDate>Sat, 14 Dec 2024 03:42:18 +0000</pubDate></item><item><title>生成26个英文字母</title><link>https://Carolynhomes.github.io/Carolynhomes/post/sheng-cheng-26-ge-ying-wen-zi-mu.html</link><description>```python&#13;
def solution1():&#13;
    import string&#13;
&#13;
    # lowercase letter&#13;
    lowercase_letters = string.ascii_lowercase&#13;
    print(lowercase_letters)&#13;
&#13;
    # uppercase letter&#13;
    uppercase_letters = string.ascii_uppercase&#13;
    print(uppercase_letters)&#13;
&#13;
&#13;
def solution2():&#13;
    # chr() and ord() functions allow us to get the letters based on ascii&#13;
    print(chr(97), chr(65))  # a A&#13;
&#13;
    lowercase_letters = ''.join(chr(i) for i in range(ord('a'), ord('z') + 1))&#13;
    print(lowercase_letters)&#13;
&#13;
    uppercase_letters = ''.join(chr(i) for i in range(ord('A'), ord('Z') + 1))&#13;
    print(uppercase_letters)&#13;
&#13;
def solution3():&#13;
    lowercase_letters = [chr(i) for i in range(ord('a'), ord('z') + 1)]&#13;
    print(''.join(lowercase_letters))&#13;
&#13;
    uppercase_letters = [chr(i) for i in range(ord('A'), ord('Z') + 1)]&#13;
    print(''.join(uppercase_letters))&#13;
&#13;
if __name__ == '__main__': &#13;
    solution3()&#13;
```。</description><guid isPermaLink="true">https://Carolynhomes.github.io/Carolynhomes/post/sheng-cheng-26-ge-ying-wen-zi-mu.html</guid><pubDate>Wed, 04 Dec 2024 12:16:00 +0000</pubDate></item><item><title>论文碰到的点-01</title><link>https://Carolynhomes.github.io/Carolynhomes/post/lun-wen-peng-dao-de-dian--01.html</link><description># 双线性映射&#13;
&#13;
双线性映射（Bilinear Mapping）是数学中一种重要的运算，其核心思想是`映射一个两变量函数到另一个值`，但这个映射对两个变量都是线性的。</description><guid isPermaLink="true">https://Carolynhomes.github.io/Carolynhomes/post/lun-wen-peng-dao-de-dian--01.html</guid><pubDate>Tue, 03 Dec 2024 14:14:33 +0000</pubDate></item><item><title>Typora编辑的markdown文档莫名其妙消失或未保存</title><link>https://Carolynhomes.github.io/Carolynhomes/post/Typora-bian-ji-de-markdown-wen-dang-mo-ming-qi-miao-xiao-shi-huo-wei-bao-cun.html</link><description>&gt;[!tip]&#13;
&gt; 我是换了名字之后，文件内容忽然不见了&#13;
# 解决办法&#13;
- 打开偏好设置&#13;
- 然后，选择文件中的，**`恢复未保存的草稿`**，可以找到对应的内容。</description><guid isPermaLink="true">https://Carolynhomes.github.io/Carolynhomes/post/Typora-bian-ji-de-markdown-wen-dang-mo-ming-qi-miao-xiao-shi-huo-wei-bao-cun.html</guid><pubDate>Tue, 03 Dec 2024 13:53:35 +0000</pubDate></item><item><title>追剧记录</title><link>https://Carolynhomes.github.io/Carolynhomes/post/zhui-ju-ji-lu.html</link><description># 电视剧&#13;
白夜追凶——第二季第14集&#13;
&#13;
# 电影&#13;
柯南最新电影&#13;
。</description><guid isPermaLink="true">https://Carolynhomes.github.io/Carolynhomes/post/zhui-ju-ji-lu.html</guid><pubDate>Mon, 02 Dec 2024 06:11:32 +0000</pubDate></item><item><title>dfs</title><link>https://Carolynhomes.github.io/Carolynhomes/post/dfs.html</link><description># DFS简介&#13;
&#13;
搜索算法：穷举问题解空间部分/所有情况，从而求出问题的解&#13;
&#13;
深度优先搜索：&#13;
&#13;
​	本质上是**暴力枚举**&#13;
&#13;
​	深度优先：尽可能一条路走到底，走不了再回退&#13;
&#13;
# DFS和n重循环&#13;
&#13;
给定一个数字x，将其拆分成3个正整数，后一个要求大于等于前一个，给出方案&#13;
&#13;
- 最简单的思想:三重循环暴力求解&#13;
&#13;
拆分成4个正整数?&#13;
拆分成n个正整数?&#13;
&#13;
- 就需要实现n重循环&#13;
- n重循环=特定的树状结构=DFS搜索&#13;
&#13;
![image-20241130135528226](http://cdn.jsdelivr.net/gh/Carolynhomes/images@main/img/Python/202411301355445.png)&#13;
&#13;
```python&#13;
def dfs(depth):&#13;
    '''&#13;
    :params depth: 当前为第n重循环&#13;
    :return:&#13;
    '''&#13;
    global cnt&#13;
&#13;
    cnt += 1&#13;
    # 第0重 --- 第n-1重 都已经选好数字，此时只需要判断答案&#13;
    if depth == n:&#13;
        # 条件一：数字需要递增&#13;
        for i in range(1, n):&#13;
            if a[i] &gt;= a[i - 1]:&#13;
                continue&#13;
            else:&#13;
                return&#13;
        # 条件二：数字和为x&#13;
        if sum(a) != x:&#13;
            return &#13;
        # 此时是答案&#13;
        print(a)&#13;
        return &#13;
    &#13;
    # 第depth层进行选择数字：【1，x】进行枚举&#13;
    for i in range(1, x+1):&#13;
        # 选择第depth层的数字&#13;
        a[depth] = i&#13;
        # 递归进入下一层&#13;
        dfs(depth + 1)&#13;
&#13;
&#13;
&#13;
x, n = map(int, input().split())&#13;
&#13;
# 记录每层选择数字&#13;
a = [0] * n&#13;
# 计算次数 cnt&#13;
cnt = 0&#13;
&#13;
dfs(0)&#13;
print('累计计算次数={}'.format(cnt))&#13;
```&#13;
&#13;
## 剪枝&#13;
&#13;
**把条件放在枚举的时候判断可以降低计算量**&#13;
&#13;
```python&#13;
def dfs(depth, last_val):&#13;
    '''&#13;
    :params depth: 当前为第n重循环&#13;
    :return:&#13;
    '''&#13;
    global cnt&#13;
&#13;
    cnt += 1&#13;
    # 第0重 --- 第n-1重 都已经选好数字，此时只需要判断答案&#13;
    if depth == n:&#13;
        # 条件二：数字和为x&#13;
        if sum(a) != x:&#13;
            return&#13;
        # 此时是答案&#13;
        print(a)&#13;
        return&#13;
&#13;
    # 第depth层进行选择数字：【1，x】进行枚举&#13;
    # 条件一：数字需要进行递增&#13;
    for i in range(last_val, x + 1):&#13;
        # 选择第depth层的数字&#13;
        a[depth] = i&#13;
        # 递归进入下一层&#13;
        dfs(depth + 1, i)&#13;
&#13;
&#13;
x, n = map(int, input().split())&#13;
&#13;
# 记录每层选择数字&#13;
a = [0] * n&#13;
# 计算次数 cnt&#13;
cnt = 0&#13;
&#13;
dfs(0, 1)&#13;
print('累计计算次数={}'.format(cnt))&#13;
```&#13;
&#13;
## 模板&#13;
&#13;
```python&#13;
def dfs(depth):&#13;
    '''&#13;
    :param depth: 当前为第几重循环&#13;
    :return:&#13;
    '''&#13;
    if depth == N:&#13;
        # N重循环最内层执行的代码&#13;
        return&#13;
    # 每重循环进行的枚举选择&#13;
```&#13;
&#13;
## 例题&#13;
&#13;
- 蓝桥4124&#13;
&#13;
七重循环，每重循环表示1个小朋友&#13;
&#13;
每个小朋友枚举所有的糖果情况&#13;
&#13;
```python&#13;
ans = 0&#13;
&#13;
def dfs(depth, n, m):&#13;
    '''&#13;
    :param depth: 第depth个小朋友&#13;
    :param n: 第一类糖果数量&#13;
    :param m: 第二类糖果数量&#13;
    :return: 无返回值，直接修改全局变量ans&#13;
    '''&#13;
    if depth == 7:&#13;
        if n == 0 and m == 0:&#13;
            global ans&#13;
            ans += 1&#13;
        return&#13;
&#13;
    # 枚举第一种糖果&#13;
    for i in range(0, 6):&#13;
        # 枚举第二种糖果&#13;
        for j in range(0, 6):&#13;
            if 2 &lt;= i + j &lt;= 5 and i &lt;= n and j &lt;= m:&#13;
                dfs(depth + 1, n - i, m - j)&#13;
&#13;
dfs(0, 9, 16)&#13;
print(ans)&#13;
```&#13;
&#13;
- 蓝桥3505&#13;
&#13;
N冲循环，每重循环三种情况&#13;
&#13;
- 买1个&#13;
- 买一半&#13;
- 不买&#13;
&#13;
```python&#13;
def dfs(depth, s, cnt):&#13;
    '''&#13;
    :param depth: 第depth层循环&#13;
    :param s: 当前累计的重量&#13;
    :param cnt: 当前的剪的西瓜个数&#13;
    :return:&#13;
    '''&#13;
    # 递归出口&#13;
    # 1、当前累计重量已经超过m，不需要继续下去&#13;
    if s &gt; m:&#13;
        return&#13;
    # 2、当前累计重量等于m，直接更新答案&#13;
    if s == m:&#13;
        global ans&#13;
        ans = min(ans, cnt)&#13;
    # 3、第depth层时，停止继续递归&#13;
    if depth == n:&#13;
        return&#13;
    # 买一个&#13;
    dfs(depth + 1, s + w[depth], cnt)&#13;
    # 买半个&#13;
    dfs(depth + 1, s + w[depth] // 2, cnt + 1)&#13;
    # 不买&#13;
    dfs(depth + 1, s, cnt)&#13;
&#13;
n, m = map(int, input().split())&#13;
m *= 2&#13;
w = list(map(int, input().split()))&#13;
w = [x * 2 for x in w]&#13;
ans = n + 1&#13;
dfs(0, 0, 0)&#13;
if ans == n + 1:&#13;
    ans = -1&#13;
print(ans)&#13;
```&#13;
&#13;
# 回溯法&#13;
&#13;
回溯：就是DFS的一种，在搜索尝试过程中寻找问题的解，当发现已不满足求解条件时，就“回溯”返回，尝试别的路径。</description><guid isPermaLink="true">https://Carolynhomes.github.io/Carolynhomes/post/dfs.html</guid><pubDate>Sat, 30 Nov 2024 07:28:29 +0000</pubDate></item><item><title>直接访问谷歌等网站的方式</title><link>https://Carolynhomes.github.io/Carolynhomes/post/zhi-jie-fang-wen-gu-ge-deng-wang-zhan-de-fang-shi.html</link><description>https://bulianglin.com/archives/snibypass.html&#13;
&#13;
这个可以直接不要梯子就可以访问谷歌等网站，可以看这个教程：https://www.youtube.com/watch?v=kbpxGOKVBSA&amp;t=226s&#13;
&#13;
不过好像油管视频不能播放，只能浏览评论等等&#13;
&#13;
$\textcolor{red}{而且好像看评论说，不安全什么的，仅做个记录}$&#13;
&#13;
。</description><guid isPermaLink="true">https://Carolynhomes.github.io/Carolynhomes/post/zhi-jie-fang-wen-gu-ge-deng-wang-zhan-de-fang-shi.html</guid><pubDate>Sat, 30 Nov 2024 04:54:10 +0000</pubDate></item><item><title>位运算</title><link>https://Carolynhomes.github.io/Carolynhomes/post/wei-yun-suan.html</link><description># 位运算简介&#13;
&#13;
对二进制进行操作的运算方式&#13;
&#13;
- 与运算：有0则0，全1为1&#13;
&#13;
![image-20241129205424287](http://cdn.jsdelivr.net/gh/Carolynhomes/images@main/img/Python/202411292054351.png)&#13;
&#13;
- 或运算：有1则1，全0为0&#13;
&#13;
![image-20241129205437829](http://cdn.jsdelivr.net/gh/Carolynhomes/images@main/img/Python/202411292054907.png)&#13;
&#13;
- 异或运算：相同为0，不同为1&#13;
&#13;
![image-20241129205537293](http://cdn.jsdelivr.net/gh/Carolynhomes/images@main/img/Python/202411292055358.png)&#13;
&#13;
- 取反：1变0，0变1&#13;
- 左移、右移&#13;
&#13;
左移：二进制表示向左移动指定位数。</description><guid isPermaLink="true">https://Carolynhomes.github.io/Carolynhomes/post/wei-yun-suan.html</guid><pubDate>Fri, 29 Nov 2024 13:10:11 +0000</pubDate></item><item><title>构造</title><link>https://Carolynhomes.github.io/Carolynhomes/post/gou-zao.html</link><description># 什么是构造&#13;
&#13;
**构造题** 在比赛和解决问题的过程中确实是常见的一类题型。</description><guid isPermaLink="true">https://Carolynhomes.github.io/Carolynhomes/post/gou-zao.html</guid><pubDate>Fri, 29 Nov 2024 12:52:33 +0000</pubDate></item><item><title>倍增</title><link>https://Carolynhomes.github.io/Carolynhomes/post/bei-zeng.html</link><description>&gt; [!warning]&#13;
&gt;&#13;
&gt; 这部分没有例子，暂不记录，课件上的先不放，因为很复杂~&#13;
&#13;
# 倍增简介&#13;
&#13;
倍增算法是一种优化算法，通常应用于某些需要高效计算**指数幂**的场景，常用于解决**二分图**、**最短路径**、**跳跃问题**或**离线查询**的高效算法，主要用于**动态规划和分治**等问题。</description><guid isPermaLink="true">https://Carolynhomes.github.io/Carolynhomes/post/bei-zeng.html</guid><pubDate>Fri, 29 Nov 2024 12:33:04 +0000</pubDate></item><item><title>二分</title><link>https://Carolynhomes.github.io/Carolynhomes/post/er-fen.html</link><description># 二分法简介&#13;
&#13;
每次将搜索范围缩小一半，可以在O(logn)时间内找到正确答案&#13;
&#13;
## 二分法的前提和核心&#13;
&#13;
前提：单调性&#13;
&#13;
核心：利用单调性调整二分查找的区间&#13;
&#13;
## 二分法的步骤&#13;
&#13;
1、候选区间**【left,right】**&#13;
2、不断循环，直至区间满足特定条件&#13;
&#13;
​	2.1、计算中点**mid=(left+right)/2**&#13;
​	2.2、判断中点是否合法，根据中点的计算结果调整**【left,right】**&#13;
&#13;
## 二分法的用途&#13;
&#13;
1、查找有序列表a中元素x的下标&#13;
&#13;
- `bisect`——数组二分查找算法&#13;
&#13;
2、浮点二分&#13;
&#13;
3、二分答案&#13;
&#13;
# 浮点二分&#13;
&#13;
![image-20241129195045826](http://cdn.jsdelivr.net/gh/Carolynhomes/images@main/img/Python/202411291950092.png)&#13;
&#13;
```python&#13;
left, right = 1, 2&#13;
eps = 1e-4&#13;
&#13;
# 当区间长度大于eps, 说明前3位小数不同&#13;
# 否则, 前三位小数已确定&#13;
while right - left &gt;= eps:&#13;
    print('[{}, {}]'.format(left, right))&#13;
    # 求中点&#13;
    mid = (left + right) / 2&#13;
    # 分类讨论: 当mid^2 &gt; 2, 则下一次为[left, mid]&#13;
    if mid * mid &gt; 2:&#13;
        right = mid&#13;
    # 此时mid^2 &lt; 2, 下一次为[mid, right]&#13;
    else:&#13;
        left = mid&#13;
&#13;
```&#13;
&#13;
&#13;
&#13;
# 二分答案&#13;
&#13;
一般用于所求答案（一般为整数）具有单调性质，采用`猜答案+二分`&#13;
&#13;
1、确定初始范围【left，right】&#13;
&#13;
2、当left &lt;= right时：&#13;
&#13;
- mid = （left+right) // 2&#13;
&#13;
 - `check(mid)`：判断mid是否合法：check函数定义什么时候合法，根据题目的单调来定&#13;
 - 如果合法：更新`ans=mid`&#13;
 - 根据合法调整左右区间，调整策略为二选一：left = mid + 1， right = mid - 1；&#13;
&#13;
## 二分答案模板&#13;
&#13;
```python&#13;
# 二分答案&#13;
def check(x):&#13;
    # 判断x是否合法，合法返回True，否则返回False&#13;
    pass&#13;
&#13;
left, right, ans = 初始化&#13;
&#13;
while left &lt;= right:&#13;
    mid = (left + right) // 2&#13;
    if check(mid):&#13;
        ans = mid&#13;
        left = mid + 1      # 二选一&#13;
    else:&#13;
        right = mid - 1     # 二选一&#13;
print(ans)&#13;
&#13;
```&#13;
&#13;
&#13;
&#13;
## 例题&#13;
&#13;
- 蓝桥99&#13;
&#13;
![image-20241129200233201](http://cdn.jsdelivr.net/gh/Carolynhomes/images@main/img/Python/202411292002370.png)&#13;
&#13;
```python&#13;
N, K = map(int, input().split())&#13;
a = []&#13;
for i in range(N):&#13;
    x, y = map(int, input().split())&#13;
    a.append((x, y))&#13;
&#13;
# 二分答案&#13;
def check(x):&#13;
    # 判断边长为x时，能否切出至少K块&#13;
    cnt = 0  # 统计切出次数&#13;
    for h, w in a:&#13;
        cnt += (h // x) * (w // x)&#13;
    return cnt &gt;= K&#13;
&#13;
left, right = 1, 100000&#13;
ans = 1&#13;
while left &lt;= right:&#13;
    mid = (left + right) // 2&#13;
    if check(mid):&#13;
        ans = mid&#13;
        left = mid + 1&#13;
    else:&#13;
        right = mid - 1&#13;
print(ans)&#13;
&#13;
```&#13;
&#13;
&#13;
&#13;
- 蓝桥364&#13;
&#13;
![image-20241129200304007](http://cdn.jsdelivr.net/gh/Carolynhomes/images@main/img/Python/202411292003061.png)&#13;
&#13;
```python&#13;
L, N, M = map(int, input().split())&#13;
D = []&#13;
for i in range(N):&#13;
    D.append(int(input()))&#13;
&#13;
def check(x):&#13;
    # 什么是合法？当最短跳跃距离为x时，移走的岩石数量是否不超过M个&#13;
    # 当前坐标: now_idx, 移除数量: cnt&#13;
    now_idx = 0&#13;
    cnt = 0&#13;
    for i in range(N):&#13;
        # 此时这块石头跳跃距离小于x，违反规则，所以需要移除&#13;
        if D[i] - now_idx &lt; x:&#13;
            cnt += 1&#13;
        else: # 此时可以正常跳跃&#13;
            now_idx = D[i]&#13;
    # 最后一个石头到终点的距离不能小于x&#13;
    if L - now_idx &lt; x:&#13;
        return False&#13;
    return cnt &lt;= M&#13;
&#13;
left, right, ans = 1, L, 1&#13;
while left &lt;= right:&#13;
    mid = (left + right) // 2&#13;
    if check(mid):&#13;
        ans = mid&#13;
        left = mid + 1&#13;
    else:&#13;
        right = mid - 1&#13;
print(ans)&#13;
&#13;
```&#13;
&#13;
&#13;
&#13;
- 蓝桥3404&#13;
&#13;
![image-20241129200350561](http://cdn.jsdelivr.net/gh/Carolynhomes/images@main/img/Python/202411292003611.png)&#13;
&#13;
```python&#13;
n, m, k = map(int, input().split())&#13;
left, right = 1, n * m&#13;
&#13;
# 也可以先计算，然后在原始循环中判断是否合法&#13;
def check(x):&#13;
    # 求n*m矩阵中有多少个元素小于等于x&#13;
    cnt = 0&#13;
    for i in range(1, n + 1):&#13;
        cnt += min(m, x // i)&#13;
    return cnt &gt;= k&#13;
&#13;
ans = 0&#13;
while left &lt;= right:&#13;
    mid = (left + right) // 2&#13;
    # 第k小，小于等于mid的个数至少为k个&#13;
    if check(mid):&#13;
        ans = mid&#13;
        right = mid - 1&#13;
    else:&#13;
        left = mid + 1&#13;
print(ans)&#13;
&#13;
```&#13;
&#13;
## 课后作业&#13;
&#13;
蓝桥 199、111、1217、909、1591、2143、2145、2147&#13;
&#13;
。</description><guid isPermaLink="true">https://Carolynhomes.github.io/Carolynhomes/post/er-fen.html</guid><pubDate>Fri, 29 Nov 2024 12:12:32 +0000</pubDate></item><item><title>日常软件集合</title><link>https://Carolynhomes.github.io/Carolynhomes/post/ri-chang-ruan-jian-ji-he.html</link><description># 磁盘分析&#13;
分析磁盘空间，哪个文件占内存多少，等等：https://diskanalyzer.com/&#13;
&#13;
# 卸载软件&#13;
卸载软件的同时，可以删除对应的注册表信息：https://geekuninstaller.com/&#13;
&#13;
。</description><guid isPermaLink="true">https://Carolynhomes.github.io/Carolynhomes/post/ri-chang-ruan-jian-ji-he.html</guid><pubDate>Fri, 29 Nov 2024 06:22:42 +0000</pubDate></item><item><title>信息安全基础02</title><link>https://Carolynhomes.github.io/Carolynhomes/post/xin-xi-an-quan-ji-chu-02.html</link><description># 第二章 密码学基础&#13;
&#13;
## 1. 密码分析分类&#13;
&#13;
&gt; 密文： `Ciphertext`	明文：`Plaintext`&#13;
&#13;
唯密文攻击&#13;
&#13;
- 破译者已知：加密算法、待破译的密文&#13;
- `是最困难的`&#13;
&#13;
已知明文攻击&#13;
&#13;
- 破译者已知：加密算法、一定数量的密文和对应的明文&#13;
&#13;
选择明文攻击&#13;
&#13;
- 破译者已知：加密算法、选定的明文和对应的密文&#13;
&#13;
选择密文攻击&#13;
&#13;
- 破译者已知：加密算法、选定的密文和对应的明文&#13;
&#13;
选择文本攻击&#13;
&#13;
- 破译者已知：加密算法、选定的明文和对应的密文、选定的密文和对应的明文&#13;
&#13;
&gt; 一个密码体制是安全的，通常是指在前三种攻击下的安全性&#13;
&#13;
## 2. 密码系统的安全条件&#13;
&#13;
密码系统的安全性`只寓于密钥`，通常假定算法是公开的&#13;
&#13;
## 3. 破译算法分级&#13;
&#13;
全部破译&#13;
&#13;
全部推导&#13;
&#13;
实例推导&#13;
&#13;
信息推导&#13;
&#13;
## 4. 衡量攻击方法的复杂性&#13;
&#13;
数据复杂性&#13;
&#13;
处理复杂性&#13;
&#13;
存储需求&#13;
&#13;
## 5. 评价密码体制安全性的三个途径&#13;
&#13;
计算安全性&#13;
&#13;
可证明安全性&#13;
&#13;
无条件安全性&#13;
&#13;
## 6. 一个密码系统实际安全的条件&#13;
&#13;
- 每一个加密函数和每一个解密函数都能有效的计算&#13;
- 破译者取得密文后将**不能在有效的时间**或**成本范围内**破解出密钥或明文&#13;
- `一个密码系统是安全的必要条件`：**穷举密钥搜索**将是不可行的&#13;
&#13;
## 7. 加密系统的几个知识点&#13;
&#13;
用于将明文转换为密文的操作类型 &#13;
&#13;
- 替换  &#13;
- 置换&#13;
&#13;
使用的密钥数量&#13;
&#13;
- 对称密钥（单一密钥、秘密密钥或传统加密）  &#13;
- 非对称密钥（双密钥、公钥加密）&#13;
&#13;
明文处理的方式  &#13;
&#13;
- 块加密  &#13;
- 流加密&#13;
&#13;
## 8. 安全模型&#13;
&#13;
网络传输中的信息安全&#13;
&#13;
- 动态数据的安全&#13;
- 网络安全模型&#13;
&#13;
计算机系统中的信息安全&#13;
&#13;
- 静态数据的安全&#13;
- 网络访问安全模型&#13;
&#13;
![网络通信安全模型](http://cdn.jsdelivr.net/gh/Carolynhomes/images@main/img/Python/202411281531134.png)&#13;
&#13;
![网络访问安全模型](http://cdn.jsdelivr.net/gh/Carolynhomes/images@main/img/Python/202411281531564.png)&#13;
&#13;
## 9. 密码体制&#13;
&#13;
### 对称密码体制&#13;
&#13;
**优缺点:**&#13;
&#13;
**优点：**  加/解密处理速度快、保密度高等。</description><guid isPermaLink="true">https://Carolynhomes.github.io/Carolynhomes/post/xin-xi-an-quan-ji-chu-02.html</guid><pubDate>Thu, 28 Nov 2024 09:15:39 +0000</pubDate></item><item><title>进制转换</title><link>https://Carolynhomes.github.io/Carolynhomes/post/jin-zhi-zhuan-huan.html</link><description># 1. 任意进制转十进制&#13;
&#13;
```python&#13;
int_to_char = '0123456789ABCDEF'&#13;
char_to_int = {}&#13;
for idx, char in enumerate(int_to_char):&#13;
    char_to_int[char] = idx&#13;
&#13;
# k进制数字x转换成十进制：0-9、A-F&#13;
def k_to_ten(k, x):&#13;
    ans = 0&#13;
    for char in x:&#13;
        ans = ans * k + char_to_int[char]&#13;
    return ans&#13;
&#13;
res = k_to_ten(2, '10001')&#13;
print(res)&#13;
```&#13;
&#13;
# 2. 十进制转任意进制&#13;
&#13;
除K取余法：十进制数字不断除以K求余数，然后逆序输出&#13;
&#13;
```python&#13;
int_to_char = '0123456789ABCDEF'&#13;
&#13;
# 十进制x转为k进制&#13;
def ten_to_k(k, x):&#13;
    ans = ''&#13;
    while x != 0:&#13;
        ans += int_to_char[x % k]&#13;
        x //= k&#13;
    &#13;
    return ans[::-1]&#13;
&#13;
print(ten_to_k(16, 31))&#13;
```&#13;
&#13;
。</description><guid isPermaLink="true">https://Carolynhomes.github.io/Carolynhomes/post/jin-zhi-zhuan-huan.html</guid><pubDate>Tue, 26 Nov 2024 13:50:18 +0000</pubDate></item><item><title>代码粘贴</title><link>https://Carolynhomes.github.io/Carolynhomes/post/dai-ma-zhan-tie.html</link><description>没挂梯子的时候：https://www.codepaste.cn/#/&#13;
挂梯子的时候：https://paste.org.cn/&#13;
&gt; [!tip]&#13;
&gt; 下面这个证书过期了，可能会报不安全，无碍~&#13;
。</description><guid isPermaLink="true">https://Carolynhomes.github.io/Carolynhomes/post/dai-ma-zhan-tie.html</guid><pubDate>Tue, 26 Nov 2024 06:47:44 +0000</pubDate></item><item><title>双指针</title><link>https://Carolynhomes.github.io/Carolynhomes/post/shuang-zhi-zhen.html</link><description>双指针：在区间操作时，利用两个下标同时遍历，进行高效操作&#13;
&#13;
`双指针利用性质可以把O(n²)时间降低到O(n)`&#13;
&#13;
## 反向扫描&#13;
&#13;
**两个指针，反向遍历**&#13;
&#13;
一般用于**有序数组** 或者 **字符串类**的问题&#13;
&#13;
### 例题&#13;
&#13;
- 回文字符串 蓝桥1371&#13;
&#13;
```python&#13;
s = input()&#13;
l, r = 0, len(s) - 1&#13;
flag = 'Y'&#13;
while l &lt;= r:&#13;
    if s[l] == s[r]:&#13;
        l += 1&#13;
        r -= 1&#13;
    else:&#13;
        flag = 'N'&#13;
        break&#13;
&#13;
print(flag) &#13;
```&#13;
&#13;
```python&#13;
s = input()&#13;
if s == s[::-1]:&#13;
    print('Y')&#13;
else:&#13;
    print('N')&#13;
```&#13;
&#13;
## 同向扫描--滑动窗口&#13;
&#13;
始终维护一个【left，right】的区间&#13;
&#13;
维护`[left,right]`区间中的信息：**区间和、各个元素个数等**&#13;
&#13;
- 左端点往右移动表示`删除元素`&#13;
&#13;
- 右端点往右移动表示`增加元素`&#13;
&#13;
当移动到尾部则停止，或满足特殊条件时停止&#13;
&#13;
### 例题&#13;
&#13;
- 蓝桥 1372&#13;
&#13;
```python&#13;
n, S = map(int, input().split())&#13;
a = list(map(int, input().split()))&#13;
# 找最小区间，满足区间之和 &gt;=S&#13;
min_len = n + 1&#13;
# [left, right)&#13;
left, right = 0, 0&#13;
&#13;
# tot表示滑动窗口[left, right)之间的区间和&#13;
tot = 0&#13;
while left &lt; n:&#13;
    # 不断扩展右端点，直至区间之和 &gt;= S&#13;
    while right &lt; n and tot &lt; S:&#13;
        tot += a[right]&#13;
        right += 1&#13;
    &#13;
    if tot &gt;= S:&#13;
        min_len = min(min_len, right - left) &#13;
    &#13;
    # 左端点往右走一步&#13;
    tot -= a[left]&#13;
    left += 1&#13;
&#13;
if min_len == n + 1:&#13;
    min_len = 0&#13;
&#13;
print(min_len)&#13;
```&#13;
&#13;
- 蓝桥 1621&#13;
&#13;
```python&#13;
n, m, k = map(int, input().split())&#13;
a = list(map(int, input().split()))&#13;
&#13;
# 找有多少个区间满足：至少k个数字大于等于m&#13;
ans = 0&#13;
&#13;
# [left, right)&#13;
left, right = 0, 0&#13;
&#13;
# cnt 表示滑动窗口[left, right)中大于等于m的元素个数&#13;
cnt = 0&#13;
while left &lt; n:&#13;
    # 不断扩展右端点，直至区间恰好有k个元素大于等于m&#13;
    while right &lt; n and cnt &lt; k:&#13;
        if a[right] &gt;= m:&#13;
            cnt += 1&#13;
        right += 1&#13;
    &#13;
    if cnt &gt;= k:&#13;
        # [left, righ-1]&#13;
        #...&#13;
        # [left, n-1]&#13;
        # n-1-(right-1)+1 = n - right + 1&#13;
        ans += n - right + 1&#13;
    &#13;
    # 左端点往右走一步&#13;
    if a[left] &gt;= m:&#13;
        cnt -= 1&#13;
    left += 1&#13;
&#13;
print(ans)&#13;
```&#13;
&#13;
。</description><guid isPermaLink="true">https://Carolynhomes.github.io/Carolynhomes/post/shuang-zhi-zhen.html</guid><pubDate>Mon, 25 Nov 2024 12:58:34 +0000</pubDate></item><item><title>贪心</title><link>https://Carolynhomes.github.io/Carolynhomes/post/tan-xin.html</link><description>## 贪心概念&#13;
&#13;
贪心：把整体问题分解成多个步骤，在每个步骤都选取当前步骤的最优方案，直到所有步骤结束，每个步骤不会影响后续步骤&#13;
&#13;
核心性质：每次采用局部最优，最终结果就全局最优&#13;
&#13;
&gt; 例子&#13;
&gt;&#13;
&gt; 最少硬币支付问题：1元、2元、5元，数量不限，现在需要支付M元，要求硬币数目最少，应该如何支付?&#13;
&gt;&#13;
&gt; 局部最优：要保证硬币尽可能少，所以当前尽可能选择大面值的硬币&#13;
&#13;
- 并不是所有采用局部最优都可以得到全局最优&#13;
&#13;
## 如何判断是否能用贪心&#13;
&#13;
- 最优子结构性质：当**一个问题的最优解包含子问题的最优解**，则称之为具有最优子结构性质&#13;
&#13;
具体问题怎么做：&#13;
&#13;
- 经验性积累各种类型的贪心&#13;
- 举反例&#13;
&#13;
## 经典贪心&#13;
&#13;
- 蓝桥545&#13;
&#13;
```python&#13;
# 只写了一个半成品&#13;
# 10分钟&#13;
```&#13;
&#13;
答案：&#13;
&#13;
```python&#13;
import heapq  # 堆&#13;
&#13;
n = int(input())&#13;
a = list(map(int, input().split()))&#13;
&#13;
heapq.heapify(a)  # # 将无序的list转为最小堆&#13;
ans = 0&#13;
&#13;
while len(a) != 1:&#13;
    x = heapq.heappop(a)  # 弹出并返回最小元素&#13;
    y = heapq.heappop(a)&#13;
    heapq.heappush(a, x + y)  # 向堆中添加元素&#13;
    ans += x + y&#13;
&#13;
print(ans)&#13;
```&#13;
&#13;
- 蓝桥杯532——分箱问题&#13;
&#13;
```python&#13;
# 每组纪念品价格上限&#13;
w = int(input())&#13;
&#13;
# n个纪念品&#13;
n = int(input())&#13;
&#13;
# n个纪念品的价格&#13;
a = []&#13;
for i in range(n):&#13;
    a.append(int(input()))&#13;
&#13;
# 1. 排序&#13;
a.sort()&#13;
# 最小的和最大的下标&#13;
l, r = 0, n - 1&#13;
ans = 0&#13;
&#13;
while True:&#13;
    if l == r:&#13;
        ans += 1&#13;
        break&#13;
&#13;
    if l &gt; r:&#13;
        break&#13;
&#13;
    # 能够配对&#13;
    if a[l] + a[r] &lt;= w:&#13;
        ans += 1&#13;
        l += 1&#13;
        r -= 1&#13;
    else:&#13;
        # 大的单独放&#13;
        ans += 1&#13;
        r -= 1&#13;
&#13;
print(ans)&#13;
```&#13;
&#13;
- 蓝桥杯209&#13;
&#13;
```python&#13;
s = list(input())&#13;
t = list(input())&#13;
n = len(s)&#13;
ans = 0&#13;
&#13;
# 逐一比对，只要能翻就翻&#13;
for i in range(n):&#13;
    if s[i] == t[i]:&#13;
        continue&#13;
&#13;
    if s[i + 1] == '*':&#13;
        s[i + 1] = 'o'&#13;
    else:&#13;
        s[i + 1] = '*'&#13;
    &#13;
    ans += 1&#13;
&#13;
print(ans)&#13;
```&#13;
&#13;
## 数组乘积问题&#13;
&#13;
![image-20241125200912044](http://cdn.jsdelivr.net/gh/Carolynhomes/images@main/img/Python/202411252009383.png)&#13;
&#13;
。</description><guid isPermaLink="true">https://Carolynhomes.github.io/Carolynhomes/post/tan-xin.html</guid><pubDate>Mon, 25 Nov 2024 12:10:25 +0000</pubDate></item><item><title>看剧看剧</title><link>https://Carolynhomes.github.io/Carolynhomes/post/kan-ju-kan-ju.html</link><description>奈飞工厂：https://www.netflixgc.com&#13;
&gt; 这个主要是只添加Netflix和HBO大陆无版权影剧！&#13;
---&#13;
七味网：https://www.qwnull.com。</description><guid isPermaLink="true">https://Carolynhomes.github.io/Carolynhomes/post/kan-ju-kan-ju.html</guid><pubDate>Mon, 25 Nov 2024 11:35:48 +0000</pubDate></item><item><title>Gpt通知</title><link>https://Carolynhomes.github.io/Carolynhomes/post/Gpt-tong-zhi.html</link><description># 2024年12月14日18点08分&#13;
更新了最新的官网UI，这一版新增加了project功能，还没有适配完，在project中对话所有人能看到。</description><guid isPermaLink="true">https://Carolynhomes.github.io/Carolynhomes/post/Gpt-tong-zhi.html</guid><pubDate>Sun, 03 Nov 2024 09:37:37 +0000</pubDate></item></channel></rss>