<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0"><channel><title>牧天白衣</title><link>https://Carolynhomes.github.io/Carolynhomes</link><description>哎，今天又是美好的一天哟！！！！！</description><copyright>牧天白衣</copyright><docs>http://www.rssboard.org/rss-specification</docs><generator>python-feedgen</generator><image><url>http://cdn.jsdelivr.net/gh/Carolynhomes/images@main/img/study/personal_page202411031753659.jpg</url><title>avatar</title><link>https://Carolynhomes.github.io/Carolynhomes</link></image><lastBuildDate>Sun, 03 Nov 2024 11:13:03 +0000</lastBuildDate><managingEditor>牧天白衣</managingEditor><ttl>60</ttl><webMaster>牧天白衣</webMaster><item><title>日常生活中碰到的问题</title><link>https://Carolynhomes.github.io/Carolynhomes/post/ri-chang-sheng-huo-zhong-peng-dao-de-wen-ti.html</link><description># 1. 清理C盘&#13;
&#13;
参考文章（很详细）：https://www.zhihu.com/question/381961379/answer/2887802581&#13;
&#13;
。</description><guid isPermaLink="true">https://Carolynhomes.github.io/Carolynhomes/post/ri-chang-sheng-huo-zhong-peng-dao-de-wen-ti.html</guid><pubDate>Sun, 03 Nov 2024 11:12:40 +0000</pubDate></item><item><title>Gmeek强调信息的5种方式</title><link>https://Carolynhomes.github.io/Carolynhomes/post/Gmeek-qiang-diao-xin-xi-de-5-zhong-fang-shi.html</link><description>&gt; [!NOTE]&#13;
&gt; Useful information that users should know, even when skimming content.——[!NOTE]&#13;
&#13;
&gt; [!TIP]&#13;
&gt; Helpful advice for doing things better or more easily.——[!TIP]&#13;
&#13;
&gt; [!IMPORTANT]&#13;
&gt; Key information users need to know to achieve their goal.——[!IMPORTANT]&#13;
&#13;
&gt; [!WARNING]&#13;
&gt; Urgent info that needs immediate user attention to avoid problems.——[!WARNING]&#13;
&#13;
&gt; [!CAUTION]&#13;
&gt; Advises about risks or negative outcomes of certain actions.——[!CAUTION]&#13;
。</description><guid isPermaLink="true">https://Carolynhomes.github.io/Carolynhomes/post/Gmeek-qiang-diao-xin-xi-de-5-zhong-fang-shi.html</guid><pubDate>Sun, 03 Nov 2024 11:01:32 +0000</pubDate></item><item><title>Gpt通知</title><link>https://Carolynhomes.github.io/Carolynhomes/post/Gpt-tong-zhi.html</link><description># 11月3日 16:37:02&#13;
试验性解决降智问题，缺点是提问会变慢。</description><guid isPermaLink="true">https://Carolynhomes.github.io/Carolynhomes/post/Gpt-tong-zhi.html</guid><pubDate>Sun, 03 Nov 2024 09:37:37 +0000</pubDate></item><item><title>02-JS快速入门</title><link>https://Carolynhomes.github.io/Carolynhomes/post/02-JS-kuai-su-ru-men.html</link><description>菜鸟教程：https://www.runoob.com/js/js-tutorial.html&#13;
&#13;
# JS&#13;
&#13;
百度打开右键，F12 检查，打开控制台，可以执行 js 代码&#13;
&#13;
## 对象操作&#13;
&#13;
- 对象的增删改查  &#13;
&#13;
- 创建对象`let obj = {}` &#13;
&#13;
现在对象的创建有两种  var 不常用了&#13;
&#13;
主要是  let obj = {} 和  const obj = {} ，后一个主要用于常量&#13;
&#13;
- 新增属性 `obj.a = 1`&#13;
- 修改属性 `obj.a = 'a'`&#13;
- 查询属性 `obj.a`&#13;
- 删除属性 `delete obj.a`&#13;
&#13;
```javascript&#13;
 &lt;body&gt;&#13;
   &lt;script&gt;&#13;
     let obj = {};&#13;
     const obj2 = {};&#13;
 &#13;
     obj.a = '1';&#13;
     console.log(obj);&#13;
 &#13;
     obj.a = true;&#13;
     console.log(obj);&#13;
 &#13;
     delete obj.a;&#13;
     console.log(obj);&#13;
   &lt;/script&gt;&#13;
 &lt;/body&gt;&#13;
```&#13;
&#13;
- 其他操作&#13;
&#13;
- `obj[a] = 1`&#13;
&#13;
赋值操作有两种&#13;
&#13;
```&#13;
 obj.name = '张三'`&#13;
 `obj['address'] = '安徽省'&#13;
```&#13;
&#13;
第二种，方括号里面只能是 `字符串`&#13;
&#13;
- Object.assign(a, b)  对象转移——深拷贝，将 b 的对象属性给 a，但是 a 接下来继续新增属性，b 不会增加&#13;
&#13;
- 直接等  是浅拷贝，同样情况下， b 会增加&#13;
&#13;
```javascript&#13;
 // 两种深拷贝例子和一个浅拷贝例子&#13;
 let teacher = {};  // 新的对象, 老师&#13;
 Object.assign(teacher, user);  // 深拷贝&#13;
 console.log('================');&#13;
 console.log(teacher);&#13;
 &#13;
 teacher.birth = '1993.10.01';&#13;
 console.log('================teacher=======');&#13;
 console.log(teacher);&#13;
 console.log('================user=======');&#13;
 console.log(user);&#13;
 &#13;
 let teacher1 = Object.assign({}, user);&#13;
 &#13;
 let teacher2 = user;  // 浅拷贝&#13;
 teacher2.xxx = '哈哈哈哈';&#13;
 console.log('================teacher2=======');&#13;
 console.log(teacher2);&#13;
 console.log('================user=======');&#13;
 console.log(user);&#13;
 &#13;
 &#13;
 let userStr = JSON.stringify(user);&#13;
 let teacher3 = JSON.parse(userStr);  // 深拷贝&#13;
 teacher3.yyyy = '哈哈哈';&#13;
 console.log('================teacher3=======');&#13;
 console.log(teacher3);&#13;
 console.log('================user=======');&#13;
 console.log(user);&#13;
```&#13;
&#13;
- `let {name} = user`    解构语法&#13;
&#13;
```javascript&#13;
 console.log('================user拿出一个属性=======');&#13;
 console.log(user.name);&#13;
 console.log(user['name']);&#13;
 &#13;
 let { name } = user;&#13;
 console.log('================解构语法=======');&#13;
 console.log(name);&#13;
```&#13;
&#13;
- ?.  —— 安全访问数据的方式&#13;
&#13;
- `b = a?.name` a 是 `undefined`或者 `null`，b 不报错，其他清空都会报错   &#13;
&#13;
- ?? —— `b = a ?? c`  a 是 `undefined` 或者 `null` 则赋值 c 给 b&#13;
- ||  —— `b = a || c` a 是 `undefined`或者 `null`，则取 c&#13;
- ??= —— `b ??= a` 左侧是 `undefined`或者 `null`，则取右侧的值&#13;
&#13;
```javascript&#13;
 let jsonObj = {1: 'a', 2: 'b'}&#13;
 console.log(jsonObj[1])  // a&#13;
 // 只能这样访问&#13;
 &#13;
 // == 只比较值，不比较类型&#13;
 // === 都比较&#13;
 &#13;
 // 我们也可以将该对象的属性进行操作&#13;
 let jsObj = { 1: 'a', 2: 'b' };&#13;
 console.log(jsObj[1]);  // 在 JavaScript 中，对象的键总是以字符串形式存储的，即使你在定义时使用了数字，其实在内部是这样的：let jsObj = { '1': 'a', '2': 'b' };&#13;
 &#13;
 // forin结构  对象循环 动态修改 value的值&#13;
 for (const key in jsObj) {&#13;
   jsObj[key] = jsObj[key] + '123';&#13;
   // console.log(key + '=' + jsObj[key])&#13;
   if (key == '1') {&#13;
     jsObj[key] = jsObj[key] + '123' + '青哥哥好帅啊';&#13;
   }&#13;
 }&#13;
 &#13;
 console.log(jsObj);&#13;
```&#13;
&#13;
## 数组操作&#13;
&#13;
### 数组的增删改查&#13;
&#13;
- 创建数组 `let arr = []`&#13;
- 新增元素 &#13;
    - `arr[0] = 1`    `arr[2] = 3`&#13;
    - `push()`&#13;
    - `unshift()`&#13;
- 删除元素&#13;
    - `splice()`&#13;
    - `pop()`&#13;
    - `shift()`&#13;
&#13;
- 修改元素 `arr[index] = 1`&#13;
- 查询元素 `arr[index]`&#13;
- 截取元素 `slice()`&#13;
- 合并数组 `concat()`&#13;
&#13;
- 字符串变数组 `split()`&#13;
- 数组变字符串  `join()` 默认使用 , 分割&#13;
- 排序 `sort()` **有坑**  [1, 2, 10] -&gt; [1, 10, 2]&#13;
- 倒序 `reverse()`&#13;
- 获取元素序号 `indexOf()`  `lastIndexOf()`&#13;
- 【神器】 `filter()` 可以筛选和删除元素&#13;
- 【神器】`find()`&#13;
- `map`&#13;
- `forEach([item], [index])`&#13;
- reduce&#13;
    - 语法：`arr.reduce(function(pre, current, index, arr){...}, init);`&#13;
    - pre累积器累计回调的返回值，表示上一次调用回调时的返回值，或者初始值 init&#13;
    - cur表示当前正在处理的数组元素&#13;
    - index表示当前正在处理的数组元素的索引&#13;
    - arr 表示原数组&#13;
    - init 初始值&#13;
&#13;
```javascript&#13;
let arr3 = [2,3];&#13;
let arr4 = [1,4];&#13;
let arr5 = arr3.concat(arr4);&#13;
console.log(arr5);&#13;
&#13;
let str = '青哥哥讲课，真的很干啊啊啊';&#13;
console.log(str.split('，'));&#13;
&#13;
let arrB = [1,2,3,4];&#13;
console.log(arrB.join('| | |'));  // 数字数组变成了字符串&#13;
&#13;
let sortArr = [1,2,10,8,6,22,11];&#13;
let newSortArr = sortArr.sort((a,b) =&gt; a-b);  // unicode编码排序&#13;
console.log(newSortArr);  // [1,2,10] =&gt; [1, 10, 2]&#13;
&#13;
let reverseArr = [1,2,10,8,6,22,11];&#13;
console.log(reverseArr.reverse());&#13;
console.log(reverseArr.sort((a,b) =&gt; b-a));  // 完美的倒序方法&#13;
&#13;
let indexArr = [1,2,3];&#13;
console.log(indexArr.indexOf(3));  // 2  没有的时候是 -1  有这个元素就从 0 开始编号&#13;
&#13;
&#13;
&#13;
&lt;script&gt;&#13;
  let users = [ { name: '张三', age: 20 }, { name: '李四', age: 21 }, { name: '王二', age: 22 } ]&#13;
  let newUsers = []&#13;
  users.forEach(aaa =&gt; {&#13;
    if (aaa.age &gt; 20) {&#13;
      newUsers.push(aaa)&#13;
    }&#13;
  })&#13;
  console.log(newUsers)&#13;
&#13;
  let newUsers1 = users.filter(aaa =&gt; aaa.age &gt; 20 &amp;&amp; aaa.name.includes('李'))&#13;
  console.log(newUsers1)&#13;
&#13;
  // 删除数组的某一项&#13;
  // let inx&#13;
  // users.forEach((item, index) =&gt; {&#13;
  //   if (item.name === '李四') {&#13;
  //     inx = index&#13;
  //   }&#13;
  // })&#13;
  // users.splice(inx, 1)&#13;
  // console.log(users)&#13;
&#13;
  let newArr = users.filter(v =&gt; v.name !== '李四' &amp;&amp; v.name !== '王二')  // 删除数组的指定元素  是不是很舒服&#13;
  console.log('=======filter删除后=======')&#13;
  console.log(newArr)&#13;
&lt;/script&gt;&#13;
&#13;
&#13;
let lisi = users.find(v =&gt; v.name === '李四')&#13;
console.log(lisi)&#13;
&#13;
let lisiIndex = users.findIndex(v =&gt; v.name === '张三')&#13;
console.log(lisiIndex)&#13;
&#13;
&#13;
let names = users.map(v =&gt; v.name)&#13;
console.log(names)&#13;
&#13;
// 这段代码展示了 reduce 方法的两种用法：&#13;
&#13;
//计算 users 数组中所有用户年龄的总和，并加上 10 的偏移量。</description><guid isPermaLink="true">https://Carolynhomes.github.io/Carolynhomes/post/02-JS-kuai-su-ru-men.html</guid><pubDate>Sun, 03 Nov 2024 04:30:48 +0000</pubDate></item><item><title>01-HTML、CSS布局快速入门</title><link>https://Carolynhomes.github.io/Carolynhomes/post/01-HTML%E3%80%81CSS-bu-ju-kuai-su-ru-men.html</link><description># 学习资源&#13;
&#13;
- HTML： https://www.runoob.com/html/html-tutorial.html&#13;
- CSS： https://www.runoob.com/css/css-tutorial.html&#13;
- Vue： https://www.runoob.com/vue2/vue-tutorial.html&#13;
&#13;
# HTML&#13;
&#13;
- div&#13;
- span&#13;
- h1-h6&#13;
- i&#13;
- strong&#13;
- a&#13;
- img&#13;
- video&#13;
- input&#13;
- textarea&#13;
- button&#13;
&#13;
![image](https://github.com/user-attachments/assets/e28ac798-17da-4ebe-84b2-7096b1411804)&#13;
&#13;
# CSS 布局思路&#13;
&#13;
```&#13;
box-sizing: border-box;` 定义如何计算一个元素的总宽度和总高度，主要设置是否需要加上内边距(padding) 和边框等。</description><guid isPermaLink="true">https://Carolynhomes.github.io/Carolynhomes/post/01-HTML%E3%80%81CSS-bu-ju-kuai-su-ru-men.html</guid><pubDate>Sun, 03 Nov 2024 04:01:59 +0000</pubDate></item><item><title>快速搭建一个Github个人页面</title><link>https://Carolynhomes.github.io/Carolynhomes/post/kuai-su-da-jian-yi-ge-Github-ge-ren-ye-mian.html</link><description>&gt; 啊没错，就是搭建我现在这个，5分钟不到，搞定~&#13;
&#13;
# 自己操作步骤&#13;
$\textcolor{red}{我还是建议看视频的，很详细}$&#13;
&#13;
1. 【创建仓库】点击[通过模板创建仓库](https://github.com/new?template_name=Gmeek-template&amp;template_owner=Meekdai)，建议仓库名称为XXX.github.io，其中XXX为你的github用户名。</description><guid isPermaLink="true">https://Carolynhomes.github.io/Carolynhomes/post/kuai-su-da-jian-yi-ge-Github-ge-ren-ye-mian.html</guid><pubDate>Sun, 03 Nov 2024 02:21:30 +0000</pubDate></item><item><title>转来第一篇</title><link>https://Carolynhomes.github.io/Carolynhomes/post/zhuan-lai-di-yi-pian.html</link><description>啊啊啊啊，如果能免费，如果容量足够大，那自然最好了！！！！！(白嫖心理)。</description><guid isPermaLink="true">https://Carolynhomes.github.io/Carolynhomes/post/zhuan-lai-di-yi-pian.html</guid><pubDate>Sat, 02 Nov 2024 16:51:33 +0000</pubDate></item></channel></rss>