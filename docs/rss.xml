<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0"><channel><title>牧天白衣</title><link>https://Carolynhomes.github.io/Carolynhomes</link><description>哎，今天又是美好的一天哟！！！！！</description><copyright>牧天白衣</copyright><docs>http://www.rssboard.org/rss-specification</docs><generator>python-feedgen</generator><image><url>https://github.githubassets.com/favicons/favicon.svg</url><title>avatar</title><link>https://Carolynhomes.github.io/Carolynhomes</link></image><lastBuildDate>Sat, 23 Nov 2024 07:06:07 +0000</lastBuildDate><managingEditor>牧天白衣</managingEditor><ttl>60</ttl><webMaster>牧天白衣</webMaster><item><title>算法学习第七天</title><link>https://Carolynhomes.github.io/Carolynhomes/post/suan-fa-xue-xi-di-qi-tian.html</link><description># 前缀和&#13;
&#13;
对于一个长度为 n 的列表 a，前缀和为：&#13;
&#13;
```&#13;
sum[i] = a[0] + a[1] + ... + a[i]&#13;
```&#13;
&#13;
例如，a=[1,3,4,2,5]，前缀和数组 sum=[1,4,8,10,15]&#13;
&#13;
## 性质&#13;
&#13;
```&#13;
sum[i] = sum[i - 1] + a[i]&#13;
a[l] + ... + a[r] = sum[r] - sum[l -1]&#13;
```&#13;
&#13;
第一条性质用于处理出前缀和&#13;
&#13;
第二条可以在 O(1)的时间内求出区间和&#13;
&#13;
## 实现&#13;
&#13;
```python&#13;
def get_presum(a):&#13;
    '''求出a的前缀和'''&#13;
    n = len(a)&#13;
    sum = [0] * n&#13;
    sum[0] = a[0]&#13;
&#13;
    for i in range(1, n):&#13;
        sum[i] = sum[i - 1] + a[i]&#13;
    &#13;
    return sum&#13;
&#13;
def get_sum(sum, l, r):&#13;
    '''求区间a[l] + ... + a[r]的和'''&#13;
    if l == 0:&#13;
        return sum[r]&#13;
    else:&#13;
        return sum[r] - sum[l - 1]&#13;
&#13;
if __name__ == '__main__': &#13;
   a = [1, 2, 3, 4, 5]&#13;
   sum = get_presum(a)&#13;
   print('a = ', a)&#13;
   print('sum = ', sum)&#13;
   print(get_sum(sum, 2, 3))&#13;
from itertools import accumulate&#13;
&#13;
def get_presum(a):&#13;
    '''求出a的前缀和'''&#13;
    sum = list(accumulate(a))&#13;
    return sum&#13;
&#13;
def get_sum(sum, l, r):&#13;
    if l == 0:&#13;
        return sum[r]&#13;
    else:&#13;
        return sum[r] - sum[l - 1]&#13;
    &#13;
```&#13;
&#13;
## 题目&#13;
&#13;
蓝桥：3382、3419&#13;
&#13;
3382——没写出来&#13;
&#13;
&#13;
&#13;
# 二维前缀和&#13;
&#13;
![img](https://cdn.nlark.com/yuque/0/2024/png/35081558/1732095890843-0d94dbd3-4767-412a-a58e-abd98de99cec.png)![img](https://cdn.nlark.com/yuque/0/2024/png/35081558/1732095941116-b00cc365-cc8c-4844-a88f-2f854109078d.png)&#13;
&#13;
```python&#13;
def output(a, n):&#13;
    for i in range(1, n + 1):&#13;
        print(' '.join(map(str, a[i][1:])))&#13;
&#13;
n, m = map(int, input().split())&#13;
&#13;
# 下标从1开始&#13;
a = [[0] * (m + 1) for i in range(n + 1)]&#13;
sum = [[0] * (m + 1) for i in range(n + 1)]&#13;
&#13;
# 输入一个二维数组&#13;
for i in range(1, n + 1):&#13;
    a[i] = [0] + list(map(int, input().split()))&#13;
&#13;
for i in range(1, n + 1):&#13;
    for j in range(1, m + 1):&#13;
        sum[i][j] = sum[i - 1][j] + sum[i][j - 1] - sum[i - 1][j - 1] + a[i][j]&#13;
&#13;
output(sum, n)&#13;
```&#13;
&#13;
![img](https://cdn.nlark.com/yuque/0/2024/png/35081558/1732096220518-b653a32a-44b4-4e3a-84e7-9cd74211750d.png)&#13;
&#13;
👆 这个图 没看懂，不应该是  54-14=30 吗&#13;
&#13;
## 题目&#13;
&#13;
蓝桥：2109。</description><guid isPermaLink="true">https://Carolynhomes.github.io/Carolynhomes/post/suan-fa-xue-xi-di-qi-tian.html</guid><pubDate>Wed, 20 Nov 2024 10:01:58 +0000</pubDate></item><item><title>每日一题 No.2</title><link>https://Carolynhomes.github.io/Carolynhomes/post/mei-ri-yi-ti-%20No.2.html</link><description>题目链接：https://www.lanqiao.cn/problems/2140/learning/&#13;
自己的代码：&#13;
```python&#13;
today = 6&#13;
count = 0  # 代表20的count次方&#13;
res = 1&#13;
&#13;
while count &lt; 22:&#13;
    res = (res * 20) % 7&#13;
    count += 1&#13;
&#13;
    ans = (today + res) % 7&#13;
    if ans == 0:&#13;
        ans = 7&#13;
&#13;
print(ans)&#13;
```&#13;
&#13;
改写的代码：&#13;
```python&#13;
today = 6  # 当前星期六&#13;
remainder = pow(20, 22, 7)  # 直接计算 20^22 对 7 的余数&#13;
next_day = (today + remainder) % 7 or 7  # 计算结果，0 表示星期日&#13;
&#13;
print(next_day)&#13;
```&#13;
- Python 的内置函数 `pow(base, exp, mod)`用于计算 `(base^exp) % mod`&#13;
- **or的作用**&#13;
&#13;
&gt; [!tip]&#13;
&gt; 在 Python 中，or 表达式会返回第一个“真值”，规则如下：&#13;
&gt; 它会从左到右依次检查两个值。</description><guid isPermaLink="true">https://Carolynhomes.github.io/Carolynhomes/post/mei-ri-yi-ti-%20No.2.html</guid><pubDate>Wed, 20 Nov 2024 08:34:35 +0000</pubDate></item><item><title>每日一题 No.1</title><link>https://Carolynhomes.github.io/Carolynhomes/post/mei-ri-yi-ti-%20No.1.html</link><description>题目链接：https://www.lanqiao.cn/problems/2141/learning/&#13;
&#13;
&gt; 难，我嘞个豆，只会简单的暴力，但是暴力，运行不出来，貌似要等五分钟才运行的出来~~~&#13;
&gt;&#13;
&gt; 最后，求助了GPT，啧&#13;
&#13;
```python&#13;
def generate_palindromes(min_value, max_value):&#13;
    '''&#13;
    Generate all palindromes within the range [min_value, max_value].&#13;
    A palindrome is a number that reads the same forwards and backwards.&#13;
&#13;
    Parameters:&#13;
        min_value (int): The minimum value of the range.&#13;
        max_value (int): The maximum value of the range.&#13;
&#13;
    Returns:&#13;
        list: A list of palindromes within the given range.&#13;
    '''&#13;
    palindromes = []&#13;
    min_len = len(str(min_value))  # Determine the minimum number of digits&#13;
    max_len = len(str(max_value))  # Determine the maximum number of digits&#13;
&#13;
    for length in range(min_len, max_len + 1):  # Iterate through possible lengths&#13;
        half_len = (length + 1) // 2  # Only generate the first half of the number&#13;
        for half in range(10 ** (half_len - 1), 10 ** half_len):  # All possible first half digits are generated&#13;
            if length % 2 == 0:  # For even-length palindromes&#13;
                palindrome = int(str(half) + str(half)[::-1])  # Mirror the half to create the palindrome&#13;
            else:  # For odd-length palindromes&#13;
                palindrome = int(str(half) + str(half)[-2::-1])  # Mirror excluding the middle digit&#13;
            if min_value &lt;= palindrome &lt;= max_value:  # Only include valid numbers in the range&#13;
                palindromes.append(palindrome)&#13;
&#13;
    return palindromes&#13;
&#13;
&#13;
def is_mountain_number(num):&#13;
    '''&#13;
    Check if a number is a mountain number.&#13;
    A mountain number is a palindrome where digits first increase or stay the same,&#13;
    then decrease or stay the same.&#13;
&#13;
    Parameters:&#13;
        num (int): The number to check.&#13;
&#13;
    Returns:&#13;
        bool: True if the number is a mountain number, False otherwise.&#13;
    '''&#13;
    s = str(num)  # Convert the number to a string&#13;
    peak_reached = False  # Track whether the peak (start of decreasing) is reached&#13;
    for i in range(len(s) - 1):&#13;
        if not peak_reached:&#13;
            if s[i] &gt; s[i + 1]:  # Check if digits start decreasing&#13;
                peak_reached = True&#13;
        if peak_reached:&#13;
            if s[i] &lt; s[i + 1]:  # If digits increase again after decreasing, it's not a mountain&#13;
                return False&#13;
    return True  # Passed all checks, it's a mountain number&#13;
&#13;
&#13;
def count_mountain_numbers(min_value, max_value):&#13;
    '''&#13;
    Count all mountain numbers within the range [min_value, max_value].&#13;
    Combines the generation of palindromes and checking for the mountain property.&#13;
&#13;
    Parameters:&#13;
        min_value (int): The minimum value of the range.&#13;
        max_value (int): The maximum value of the range.&#13;
&#13;
    Returns:&#13;
        int: The count of mountain numbers in the given range.&#13;
    '''&#13;
    palindromes = generate_palindromes(min_value, max_value)  # Generate all palindromes in range&#13;
    return sum(1 for num in palindromes if is_mountain_number(num))  # Count those that are mountain numbers&#13;
&#13;
&#13;
# Optimized calculation for the given range&#13;
start = 2022  # Start of the range&#13;
end = 2022222022  # End of the range&#13;
optimized_count = count_mountain_numbers(start, end)  # Count mountain numbers&#13;
&#13;
print(optimized_count)  # Result: Total number of mountain numbers&#13;
&#13;
```&#13;
&#13;
他这个代码：&#13;
&#13;
&gt; [!important]&#13;
&gt;&#13;
&gt; 是先把所有的在2022，2022222022的长度给确定下来&#13;
&gt;&#13;
&gt; 然后先把满足4——10这个长度的回文数全部生成，这样循环的次数就会少很很很多&#13;
&gt;&#13;
&gt; 生成的过程，也很有意思：是先把当前长度的回文数的到达顶峰的前一半给确定，然后生成的&#13;
&gt;&#13;
&gt; ​	就是他会遍历当前长度的所有数字，比如长度为4的时候，他会	取当前长度的一半，也就是2来进行回文的生成，遍历从10——1	00，这个就是精髓了啊，我嘞个豆&#13;
&gt;&#13;
&gt; 之后的生成回文数的方法，也要记得&#13;
&gt;&#13;
&gt; &gt; int(str(half) + str(half)[::-1])  偶数的处理&#13;
&gt;&#13;
&gt; &gt; int(str(half) + str(half)[-2::-1])  奇数的处理&#13;
&gt;&#13;
&gt; 这俩 绝了啊真的是&#13;
&gt;&#13;
&gt; 再之后判断递增递减， 也值得记一下&#13;
&gt;&#13;
&gt; 它设置了一个是否到达顶峰的变量 peak_reached&#13;
&gt;&#13;
&gt; 然后，如果到达了之后，就是前一个比后一个大，否则就是小&#13;
&gt;&#13;
&gt; 哎，处理方式 叹为观止（`纯碎是我技术不行 啊哈哈哈哈`）&#13;
&gt;&#13;
&gt; &#13;
&gt;&#13;
&gt; 而且其中的返回方式，也是学不会的，列表生成式，求个和?&#13;
&gt;&#13;
&gt; `return sum(1 for num in palindromes if is_mountain_number(num))`&#13;
&#13;
。</description><guid isPermaLink="true">https://Carolynhomes.github.io/Carolynhomes/post/mei-ri-yi-ti-%20No.1.html</guid><pubDate>Tue, 19 Nov 2024 09:13:47 +0000</pubDate></item><item><title>算法学习第六天</title><link>https://Carolynhomes.github.io/Carolynhomes/post/suan-fa-xue-xi-di-liu-tian.html</link><description># 递归&#13;
递归：通过自我调用来解决问题的函数&#13;
&#13;
- 通常把一个大型问题层层转化为一个与原问题相似的**规模较小的问题**来求解&#13;
&#13;
递归时要注意：&#13;
&#13;
- 递归出口&#13;
  &#13;
- 当前问题如何变成子问题&#13;
  &#13;
&#13;
**递归求阶乘**：&#13;
&#13;
```python&#13;
def f(n):&#13;
    # 递归出口&#13;
    if n &lt;= 1:&#13;
        return 1&#13;
    ans = n * f(n - 1)&#13;
&#13;
    return ans&#13;
&#13;
print(f(5))  # 120&#13;
```&#13;
&#13;
![](http://cdn.jsdelivr.net/gh/Carolynhomes/images@main/img/study/SuanFa202411171959659.png)&#13;
&#13;
**汉诺塔**：&#13;
&#13;
```python&#13;
# n个盘子从A挪到C，借助B&#13;
def Move(n, A, B, C):&#13;
    # 递归出口&#13;
    if n == 0:&#13;
        return&#13;
    # n-1个盘子从A挪到B&#13;
    Move(n - 1, A, C, B)&#13;
    # 第n个盘子从A挪到C&#13;
    print('{}-&gt;{}'.format(A, C))&#13;
    # n-1个盘子从B挪到C&#13;
    Move(n - 1, B, A, C)&#13;
&#13;
n = int(input())&#13;
Move(n, 'A', 'B', 'C')&#13;
```&#13;
# 进制转换&#13;
# 1. 任意进制转十进制&#13;
&#13;
```python&#13;
int_to_char = '0123456789ABCDEF'&#13;
char_to_int = {}&#13;
for idx, char in enumerate(int_to_char):&#13;
    char_to_int[char] = idx&#13;
&#13;
# k进制数字x转换成十进制：0-9、A-F&#13;
def k_to_ten(k, x):&#13;
    ans = 0&#13;
    for char in x:&#13;
        ans = ans * k + char_to_int[char]&#13;
    return ans&#13;
&#13;
res = k_to_ten(2, '10001')&#13;
print(res)&#13;
```&#13;
&#13;
# 2. 十进制转任意进制&#13;
&#13;
除K取余法：十进制数字不断除以K求余数，然后逆序输出&#13;
&#13;
```python&#13;
int_to_char = '0123456789ABCDEF'&#13;
&#13;
# 十进制x转为k进制&#13;
def ten_to_k(k, x):&#13;
    ans = ''&#13;
    while x != 0:&#13;
        ans += int_to_char[x % k]&#13;
        x //= k&#13;
    &#13;
    return ans[::-1]&#13;
&#13;
print(ten_to_k(16, 31))&#13;
```。</description><guid isPermaLink="true">https://Carolynhomes.github.io/Carolynhomes/post/suan-fa-xue-xi-di-liu-tian.html</guid><pubDate>Sun, 17 Nov 2024 13:39:42 +0000</pubDate></item><item><title>复盘一下研究生的第一次蓝桥杯周赛</title><link>https://Carolynhomes.github.io/Carolynhomes/post/fu-pan-yi-xia-yan-jiu-sheng-de-di-yi-ci-lan-qiao-bei-zhou-sai.html</link><description>题目列表：[第 22 场 小白入门赛 - 蓝桥云课](https://www.lanqiao.cn/oj-contest/newbie-22/)&#13;
&#13;
# 第二题-消灭卡片&#13;
&#13;
该题主要是来解决一个整数分解的问题，判断一个数 n 是否可以表示成 5*y+3*x 的形式，并且返回 x+y 的最小值。</description><guid isPermaLink="true">https://Carolynhomes.github.io/Carolynhomes/post/fu-pan-yi-xia-yan-jiu-sheng-de-di-yi-ci-lan-qiao-bei-zhou-sai.html</guid><pubDate>Sun, 17 Nov 2024 11:27:11 +0000</pubDate></item><item><title>吐槽：现在的代码水平</title><link>https://Carolynhomes.github.io/Carolynhomes/post/tu-cao-%EF%BC%9A-xian-zai-de-dai-ma-shui-ping.html</link><description>**我嘞个乖乖，好久没在短时间内写过限时代码，然后没想到自己已经退化到全是`if语句`了**&#13;
&gt; [!important]&#13;
&gt; 哎，我同学真好，哈哈哈哈，让我，突然开始反省起来了&#13;
&#13;
我刚刚写的代码：&#13;
```python&#13;
def solution2():&#13;
    t = int(input())&#13;
&#13;
    # 招募人数&#13;
    count1, count2, count3, count4, count5 = 0, 0, 0, 0, 0&#13;
    &#13;
    # 最多招募人数&#13;
    max1, max2, max3, max4, max5 = 0, 0, 0, 0, 0&#13;
&#13;
    for _ in range(t):&#13;
        number_list = list(map(int, input().split()))&#13;
        &#13;
        if 1 in number_list:&#13;
            count1 += 1&#13;
        else:&#13;
            # 如果现在招募的人数超过当前的最大值，则更新&#13;
            # 同时重置为0&#13;
            if count1 &gt; max1:&#13;
                max1 = count1&#13;
            count1 = 0&#13;
        &#13;
        if 2 in number_list:&#13;
            count2 += 1&#13;
        else:&#13;
            # 如果现在招募的人数超过当前的最大值，则更新&#13;
            # 同时重置为0&#13;
            if count2 &gt; max2:&#13;
                max2 = count2&#13;
            count2 = 0&#13;
        &#13;
        if 3 in number_list:&#13;
            count3 += 1&#13;
        else:&#13;
            # 如果现在招募的人数超过当前的最大值，则更新&#13;
            # 同时重置为0&#13;
            if count3 &gt; max3:&#13;
                max3 = count3&#13;
            count3 = 0&#13;
        &#13;
        if 4 in number_list:&#13;
            count4 += 1&#13;
        else:&#13;
            # 如果现在招募的人数超过当前的最大值，则更新&#13;
            # 同时重置为0&#13;
            if count4 &gt; max4:&#13;
                max4 = count4&#13;
            count4 = 0&#13;
        &#13;
        if 5 in number_list:&#13;
            count5 += 1&#13;
        else:&#13;
            # 如果现在招募的人数超过当前的最大值，则更新&#13;
            # 同时重置为0&#13;
            if count5 &gt; max5:&#13;
                max5 = count5&#13;
            count5 = 0&#13;
        &#13;
    if count1 &gt; max1:&#13;
        max1 = count1&#13;
    &#13;
    if count2 &gt; max2:&#13;
        max2 = count2&#13;
&#13;
    if count3 &gt; max3:&#13;
        max3 = count3&#13;
&#13;
    if count4 &gt; max4:&#13;
        max4 = count4&#13;
&#13;
    if count5 &gt; max5:&#13;
        max5 = count5&#13;
    &#13;
&#13;
    print(max1, max2, max3, max4, max5)&#13;
&#13;
&#13;
solution2()&#13;
```&#13;
&#13;
然后gpt优化一下的代码：&#13;
```python&#13;
def solution2():&#13;
    t = int(input())&#13;
    &#13;
    # 初始化字典来管理招募人数和最大值&#13;
    counts = {i: 0 for i in range(1, 6)}&#13;
    max_counts = {i: 0 for i in range(1, 6)}&#13;
&#13;
    for _ in range(t):&#13;
        number_list = list(map(int, input().split()))&#13;
        &#13;
        for i in range(1, 6):&#13;
            if i in number_list:&#13;
                counts[i] += 1  # 如果当前数字在该行，连续计数加一&#13;
            else:&#13;
                # 更新最大值并重置连续计数&#13;
                max_counts[i] = max(max_counts[i], counts[i])&#13;
                counts[i] = 0&#13;
&#13;
    # 检查最后一次连续计数&#13;
    for i in range(1, 6):&#13;
        max_counts[i] = max(max_counts[i], counts[i])&#13;
&#13;
    # 打印结果&#13;
    print(' '.join(str(max_counts[i]) for i in range(1, 6)))&#13;
&#13;
&#13;
solution2()&#13;
&#13;
```。</description><guid isPermaLink="true">https://Carolynhomes.github.io/Carolynhomes/post/tu-cao-%EF%BC%9A-xian-zai-de-dai-ma-shui-ping.html</guid><pubDate>Sun, 17 Nov 2024 11:18:16 +0000</pubDate></item><item><title>排序</title><link>https://Carolynhomes.github.io/Carolynhomes/post/pai-xu.html</link><description># 1. 冒泡排序&#13;
&#13;
```python&#13;
n = int(input())&#13;
a = list(map(int, input().split()))&#13;
&#13;
# 循环n-1次&#13;
for i in range(1, n):&#13;
    # 第i次从a[0]到a[n-i-1]&#13;
    for j in range(n-i):&#13;
        if a[j] &lt; a[j+1]:&#13;
            a[j], a[j+1] = a[j+1], a[j]&#13;
&#13;
print(' '.join(map(str, a)))&#13;
```&#13;
&#13;
# 2. 选择排序&#13;
&#13;
```python&#13;
n = int(input())&#13;
a = list(map(int, input().split()))&#13;
&#13;
# 循环n-1次&#13;
for i in range(0, n-1):&#13;
    # 第i次从a[i]到a[n-1]找最小元素&#13;
    min_value = a[i]&#13;
    min_index = i&#13;
    # 前 i 个已经是排序成功的&#13;
    for j in range(i, n):&#13;
        if a[j] &lt; min_value:&#13;
            min_value = a[j]&#13;
            min_index = j&#13;
    a[i], a[min_index] = a[min_index], a[i]&#13;
&#13;
print(' '.join(map(str, a)))&#13;
```&#13;
&#13;
# 3. 插入排序&#13;
&#13;
```python&#13;
n = int(input())&#13;
a = list(map(int, input().split()))&#13;
&#13;
# 对于第i个数字，在区间[0, i-1]中从后往前找对应插入的位置&#13;
for i in range(1, n):&#13;
    value = a[i]&#13;
    # 插入元素的下标&#13;
    insert_idx = 0&#13;
    for j in range(i-1, -1, -1):&#13;
        if a[j] &gt; value:&#13;
            # 往后挪&#13;
            a[j + 1] = a[j]&#13;
        else:&#13;
            insert_idx = j + 1&#13;
            break&#13;
&#13;
    # 插入第i个数字&#13;
    a[insert_idx] = value&#13;
&#13;
print(' '.join(map(str, a)))&#13;
```&#13;
&#13;
# 4. 快速排序&#13;
&#13;
```python&#13;
# 找一个基准值&#13;
# 把列表分成三部分：小于等于x的数字，x，大于x的数字&#13;
# 左半部分和右半部分递归使用该策略&#13;
&#13;
#  a[left, right]按照小于等于基准值，基准值、大于基准值排列&#13;
def partition(a, left, right):&#13;
    # 设置基准值下标：left&#13;
    # idx 坐标的左边 都是小于等于基准值的元素&#13;
    idx = left + 1&#13;
&#13;
    for i in range(left + 1, right + 1):&#13;
        # 如果当前元素小于等于基准值，则放到最小元素那边&#13;
        if a[i] &lt;= a[left]:&#13;
            a[idx], a[i] = a[i], a[idx]&#13;
            idx += 1&#13;
&#13;
    # 小于等于基准值的元素为[left+1, idx-1]&#13;
    # 最后将基准值放在中间&#13;
    a[left], a[idx-1] = a[idx-1], a[left]&#13;
&#13;
    # 返回基准值的下标&#13;
    return idx-1&#13;
&#13;
def quicksort(a, left, right):&#13;
    if left &lt; right:&#13;
        mid = partition(a, left, right)&#13;
        quicksort(a, left, mid - 1)&#13;
        quicksort(a, mid + 1, right)&#13;
&#13;
n = int(input())&#13;
a = list(map(int, input().split()))&#13;
&#13;
quicksort(a, 0, n - 1)&#13;
print(' '.join(map(str, a)))&#13;
```&#13;
&#13;
# 5. 归并排序&#13;
&#13;
```python&#13;
# 合并排序&#13;
def Merge(A, B):&#13;
    result = []&#13;
    while len(A) != 0 and len(B) != 0:&#13;
        if A[0] &lt;= B[0]:&#13;
            result.append(A.pop(0))&#13;
        else:&#13;
            result.append(B.pop(0))&#13;
&#13;
    result.extend(A)&#13;
    result.extend(B)&#13;
    return result&#13;
&#13;
def MergeSort(A):&#13;
    if len(A) &lt; 2:&#13;
        return A&#13;
    mid = len(A) // 2&#13;
    left = MergeSort(A[:mid])&#13;
    right = MergeSort(A[mid:])&#13;
    return Merge(left, right)&#13;
&#13;
n = int(input())&#13;
a = list(map(int, input().split()))&#13;
print(' '.join(map(str, MergeSort(a))))&#13;
```&#13;
&#13;
# 6. 桶排序&#13;
&#13;
桶排序（Bucket Sort）是一种**分配排序算法**，适合用于对**数值分布较为均匀**的数据进行排序。</description><guid isPermaLink="true">https://Carolynhomes.github.io/Carolynhomes/post/pai-xu.html</guid><pubDate>Sat, 16 Nov 2024 09:26:48 +0000</pubDate></item><item><title>算法学习第五天</title><link>https://Carolynhomes.github.io/Carolynhomes/post/suan-fa-xue-xi-di-wu-tian.html</link><description># 1. 类&#13;
&#13;
## 类和对象&#13;
&#13;
```python&#13;
class student:&#13;
    # 属性&#13;
    x = 'hello'&#13;
&#13;
    # 初始化方法，初始化一个对象&#13;
    def __init__(self, name, class_idx):&#13;
        # 属性&#13;
        self.name = name&#13;
        self.class_idx = class_idx&#13;
&#13;
&#13;
A = student('张三', '一班')&#13;
B = student('李四', '二班')&#13;
print(A.name, A.class_idx)&#13;
print(B.name, B.class_idx)&#13;
```&#13;
&#13;
- `__init__(self)`：构造方法&#13;
  &#13;
  - 可以包含多个参数，但是必须包含`self`参数&#13;
    &#13;
  - 且`self`必须为第一个参数，不需要手动传递参数&#13;
    &#13;
- 类的实例化：&#13;
  &#13;
  - 类名（参数），这里放的参数会传入`__init__`构造函数中&#13;
    &#13;
- 类中访问当前对象的属性和方法：通过`self`&#13;
  &#13;
- 对象访问属性和方法：通过`.`运算符&#13;
  &#13;
&#13;
## 属性和方法&#13;
&#13;
```python&#13;
class student:&#13;
    # 类的属性&#13;
    sex_list = ['boy', 'girl']&#13;
&#13;
    # 初始化方法&#13;
    def __init__(self, name, sex, class_idx):&#13;
        # 属性&#13;
        self.name = name&#13;
        self.sex = sex&#13;
        self.class_idx = class_idx&#13;
    &#13;
    def get_sex(self):&#13;
        return self.sex_list[self.sex]&#13;
&#13;
# 打印类属性&#13;
print(student.sex_list)&#13;
&#13;
# 定义一个对象&#13;
a = student('Alice', 1, 5)&#13;
# 实例属性&#13;
print('姓名：', a.name)&#13;
# 实例方法&#13;
print('性别', a.get_sex())&#13;
# 实例属性&#13;
print('班级：', a.class_idx)&#13;
&#13;
# 新增一个属性&#13;
a.score = 100&#13;
print('分数: ', a.score)       &#13;
```&#13;
&#13;
实例方法：通常情况下，在类中定义的方法默认都是实例方法&#13;
&#13;
- `实例名.方法名`、`self.方法名`&#13;
  &#13;
&#13;
类方法：与实例方法相似，它最少也要包含一个参数，只不过类方法中通常将其命名为`cls`&#13;
&#13;
- 类方法需要使用`@classmethod`修饰符进行修饰&#13;
  &#13;
- `类名.方法名`&#13;
  &#13;
&#13;
类静态方法：没有类似self、cls这样的特殊参数，无法调用任何类属性和类方法。</description><guid isPermaLink="true">https://Carolynhomes.github.io/Carolynhomes/post/suan-fa-xue-xi-di-wu-tian.html</guid><pubDate>Fri, 15 Nov 2024 10:55:07 +0000</pubDate></item><item><title>MarkText安装配置-设置picgo图床</title><link>https://Carolynhomes.github.io/Carolynhomes/post/MarkText-an-zhuang-pei-zhi---she-zhi-picgo-tu-chuang.html</link><description>https://blog.csdn.net/TDGX2004/article/details/125860675&#13;
&#13;
picgo的配置手册：&#13;
https://picgo.github.io/PicGo-Doc/zh/guide/config.html#%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%E9%A2%84%E8%A7%88。</description><guid isPermaLink="true">https://Carolynhomes.github.io/Carolynhomes/post/MarkText-an-zhuang-pei-zhi---she-zhi-picgo-tu-chuang.html</guid><pubDate>Fri, 15 Nov 2024 03:57:25 +0000</pubDate></item><item><title>vue在vscode中运行</title><link>https://Carolynhomes.github.io/Carolynhomes/post/vue-zai-vscode-zhong-yun-xing.html</link><description>- 首先使用vscode打开vue文件&#13;
- 然后，打开终端 ，快捷键：**ctrl  + `**&#13;
- 然后查看是否安装 Node.js 和 npm&#13;
&gt; node -v&#13;
&gt; npm -v&#13;
- 然后安装项目依赖&#13;
&#13;
在 VS Code 中打开你的 Vue 项目目录（即包含 package.json 的目录），然后执行`npm install`，这回执行package.json中的全部依赖&#13;
- 然后启动项目&#13;
&gt; npm run dev。</description><guid isPermaLink="true">https://Carolynhomes.github.io/Carolynhomes/post/vue-zai-vscode-zhong-yun-xing.html</guid><pubDate>Thu, 14 Nov 2024 04:23:15 +0000</pubDate></item><item><title>学习算法第四天</title><link>https://Carolynhomes.github.io/Carolynhomes/post/xue-xi-suan-fa-di-si-tian.html</link><description># 12. math库&#13;
&#13;
| 常量     | 描述                                                         |&#13;
| -------- | ------------------------------------------------------------ |&#13;
| math.e   | 返回欧拉数 (2.7182...)                                       |&#13;
| math.inf | 返回正无穷大浮点数                                           |&#13;
| math.nan | 返回一个浮点值 NaN (not a number)                            |&#13;
| math.pi  | π 一般指圆周率。</description><guid isPermaLink="true">https://Carolynhomes.github.io/Carolynhomes/post/xue-xi-suan-fa-di-si-tian.html</guid><pubDate>Wed, 13 Nov 2024 13:16:54 +0000</pubDate></item><item><title>DAG在区块链中的应用</title><link>https://Carolynhomes.github.io/Carolynhomes/post/DAG-zai-qu-kuai-lian-zhong-de-ying-yong.html</link><description>DAG（Directed Acyclic Graph，**有向无环图**）是一种数据结构，具有节点之间的连接是单向的，并且不存在环路，即沿着边从一个节点出发，无法回到该节点。</description><guid isPermaLink="true">https://Carolynhomes.github.io/Carolynhomes/post/DAG-zai-qu-kuai-lian-zhong-de-ying-yong.html</guid><pubDate>Wed, 13 Nov 2024 06:33:49 +0000</pubDate></item><item><title>常见的区块链和分布式网络中的攻击手段</title><link>https://Carolynhomes.github.io/Carolynhomes/post/chang-jian-de-qu-kuai-lian-he-fen-bu-shi-wang-luo-zhong-de-gong-ji-shou-duan.html</link><description>&#13;
&#13;
### 1. 女巫攻击（Sybil Attack）&#13;
女巫攻击是指恶意用户在网络中创建多个虚假身份或节点，从而获得对网络的控制权。</description><guid isPermaLink="true">https://Carolynhomes.github.io/Carolynhomes/post/chang-jian-de-qu-kuai-lian-he-fen-bu-shi-wang-luo-zhong-de-gong-ji-shou-duan.html</guid><pubDate>Wed, 13 Nov 2024 06:23:02 +0000</pubDate></item><item><title>p2p技术</title><link>https://Carolynhomes.github.io/Carolynhomes/post/p2p-ji-shu.html</link><description>P2P（Peer-to-Peer）技术是一种分布式网络架构，强调节点（或称为“对等体”）之间的直接通信和资源共享，而不依赖于中心化的服务器。</description><guid isPermaLink="true">https://Carolynhomes.github.io/Carolynhomes/post/p2p-ji-shu.html</guid><pubDate>Wed, 13 Nov 2024 06:12:37 +0000</pubDate></item><item><title>区块链——泛洪广播机制</title><link>https://Carolynhomes.github.io/Carolynhomes/post/qu-kuai-lian-%E2%80%94%E2%80%94-fan-hong-guang-bo-ji-zhi.html</link><description>在区块链中，“泛洪广播机制”是一种**信息传播方式**，用于将**新交易或新区块**迅速传播到网络中的**所有节点**，以确保区块链网络中的**数据一致性**。</description><guid isPermaLink="true">https://Carolynhomes.github.io/Carolynhomes/post/qu-kuai-lian-%E2%80%94%E2%80%94-fan-hong-guang-bo-ji-zhi.html</guid><pubDate>Wed, 13 Nov 2024 05:43:38 +0000</pubDate></item><item><title>多播 和 TCP/IP 网络架构</title><link>https://Carolynhomes.github.io/Carolynhomes/post/duo-bo-%20-he-%20TCP-IP%20-wang-luo-jia-gou.html</link><description>在区块链网络中，提到的“多播方式”指的是一种数据传输模式。</description><guid isPermaLink="true">https://Carolynhomes.github.io/Carolynhomes/post/duo-bo-%20-he-%20TCP-IP%20-wang-luo-jia-gou.html</guid><pubDate>Wed, 13 Nov 2024 05:43:17 +0000</pubDate></item><item><title>基于节点感知的自适应网络拓扑研究</title><link>https://Carolynhomes.github.io/Carolynhomes/post/ji-yu-jie-dian-gan-zhi-de-zi-shi-ying-wang-luo-tuo-pu-yan-jiu.html</link><description>“**基于节点感知的自适应网络拓扑研究**”是一种通过结合节点特性（例如节点的位置、能耗、通信能力、计算能力等）来动态优化网络拓扑结构的研究方向，主要应用于无线传感网络、物联网（IoT）、车联网和移动自组织网络等领域。</description><guid isPermaLink="true">https://Carolynhomes.github.io/Carolynhomes/post/ji-yu-jie-dian-gan-zhi-de-zi-shi-ying-wang-luo-tuo-pu-yan-jiu.html</guid><pubDate>Wed, 13 Nov 2024 05:17:48 +0000</pubDate></item><item><title>划词翻译类软件</title><link>https://Carolynhomes.github.io/Carolynhomes/post/hua-ci-fan-yi-lei-ruan-jian.html</link><description>推荐一个小小的知云官网的划词软件：&#13;
小巧；便利；学发音（笑死）&#13;
https://www.yuque.com/xtranslator/help/mep0g0。</description><guid isPermaLink="true">https://Carolynhomes.github.io/Carolynhomes/post/hua-ci-fan-yi-lei-ruan-jian.html</guid><pubDate>Wed, 13 Nov 2024 04:18:17 +0000</pubDate></item><item><title>一篇很有用的关于研究生怎么找自己的研究方向的文章</title><link>https://Carolynhomes.github.io/Carolynhomes/post/yi-pian-hen-you-yong-de-guan-yu-yan-jiu-sheng-zen-me-zhao-zi-ji-de-yan-jiu-fang-xiang-de-wen-zhang.html</link><description>https://mp.weixin.qq.com/s/295bsChkW6EC5xemDUUExA#。</description><guid isPermaLink="true">https://Carolynhomes.github.io/Carolynhomes/post/yi-pian-hen-you-yong-de-guan-yu-yan-jiu-sheng-zen-me-zhao-zi-ji-de-yan-jiu-fang-xiang-de-wen-zhang.html</guid><pubDate>Wed, 13 Nov 2024 03:46:26 +0000</pubDate></item><item><title>学习算法第三天</title><link>https://Carolynhomes.github.io/Carolynhomes/post/xue-xi-suan-fa-di-san-tian.html</link><description># 基础知识&#13;
# 9. 集合&#13;
&#13;
- 唯一的，无序的&#13;
- 只可以存不可变的数据：数字、字符串、元组&#13;
- 用 `{}`表示，其中元素用逗号分隔&#13;
&#13;
## 创建集合&#13;
&#13;
- {元素1， 元素2，元素3}&#13;
- set(x) ：把`x`转换成集合，x一般为列表、元组 ——set( )空集&#13;
&#13;
类别 | 函数 | 功能&#13;
-- | -- | --&#13;
添加元素 | s.add(x) | 集合s加入元素x&#13;
  | s.update(t) | 集合s中加入t，t是另一个集合或者元素&#13;
删除元素 | s.remove(x) | 集合s删除元素x，如果x不存在则报错&#13;
  | s.discard(x) | 集合s删除元素x，如果x不存在不会报错&#13;
  | s.pop() | 集合s随机删除一个元素&#13;
  | s.clear() | 集合s清空&#13;
判断关系方法 | s.isdisjoint(t) | 判断集合s和集合t是否不相交&#13;
  | s.issubset(t) | 判断集合s是否为集合t的子集&#13;
  | s.issuperset(t) | 判断集合s是否为集合t的超集&#13;
- 集合的 交集 并集 等等&#13;
&#13;
函数 | 功能&#13;
-- | --&#13;
s.intersection(t1, t2 ... etc) | 集合s与t1, t2...的交集，t1是必须的，后续参数可选&#13;
s.union(t1, t2 ... etc) | 集合s与t1, t2...的并集，t1是必须的，后续参数可选&#13;
s.difference(t) | s-t的差集&#13;
s.symmetric_difference(t) | s,t的对称差集&#13;
&#13;
- 交集：S&amp;T：`print('交集 = ', S &amp; T)`&#13;
- 并集：S|T：`print('并集 = ', S | T)`&#13;
- 差集：S-T、T-S：`print('差集 = ', S - T)`&#13;
- 对称差集：S^T：`print('对称差集 = ', S ^ T)`&#13;
&#13;
**集合对去重特别好用！**&#13;
# 10. time模块&#13;
&#13;
要`import time`才可以使用&#13;
&#13;
`s = time.time()`：返回一个浮点数，表示时间戳&#13;
&#13;
## 两端时间差&#13;
&#13;
```python&#13;
# 导入time模块&#13;
import time&#13;
&#13;
# 获取时间戳&#13;
start_time = time.time()&#13;
print('start_time = ', start_time)&#13;
&#13;
# 执行代码&#13;
time.sleep(3)&#13;
&#13;
# 获取时间戳&#13;
end_time = time.time()&#13;
print('end_time = ', end_time)&#13;
&#13;
# 计算运行时间&#13;
print('运行时间 = {:.0f}'.format(end_time - start_time))&#13;
```&#13;
&#13;
## 获取本地时间&#13;
&#13;
`time.localtime()`：返回本地时间，是一个`struct_time`对象，不可加减&#13;
&#13;
```python&#13;
# 导入time模块&#13;
import time&#13;
&#13;
# 获取本地时间&#13;
t = time.localtime()&#13;
&#13;
print('type(t) = ', type(t))&#13;
print('t = ', t)&#13;
&#13;
print('年份 = ', t.tm_year)  # 4位数&#13;
print('月份 = ', t.tm_mon)   # 1-12&#13;
print('日期 = ', t.tm_mday)  # 1-31&#13;
print('小时 = ', t.tm_hour)  # 0-23&#13;
print('分钟 = ', t.tm_min)   # 0-59&#13;
print('秒 = ', t.tm_sec)     # 0-61&#13;
print('一周的第几日 = ', t.tm_wday)  # 0-6, 0是周一&#13;
print('一年的第几日 = ', t.tm_yday)  # 1-366&#13;
print('夏令时标识 = ', t.tm_isdst)  # 夏令时标识&#13;
```&#13;
&#13;
&#13;
&#13;
`time.strftime(format[, t])`：把时间t按照format格式转换，返回一个字符串&#13;
&#13;
`time.strptime(string, format)`：把字符串按照format格式转换，返回一个时间&#13;
&#13;
```python&#13;
# 导入time模块&#13;
import time&#13;
&#13;
# 获取本地时间&#13;
# 上面这个好看&#13;
t = time.strftime('%Y-%m-%d %H:%M:%S', time.localtime())&#13;
print('type(t) = ', type(t))&#13;
print('t = ', t)&#13;
&#13;
t = time.strptime(t, '%Y-%m-%d %H:%M:%S')&#13;
print('type(t) = ', type(t))&#13;
print('t = ', t)&#13;
```&#13;
&#13;
&#13;
&#13;
# 11. datatime模块&#13;
&#13;
定义date，传递年月日  `a = datetime.date(2023, 10, 1)`&#13;
&#13;
获取年月日：`a.year   a.month    a.day   a.weekday()`&#13;
&#13;
date之间进行减法：&#13;
&#13;
```python&#13;
a = datetime.date(2023, 10, 1)&#13;
b = datetime.date(2023, 10, 7)&#13;
print(b - a)&#13;
```&#13;
&#13;
也支持 &gt;、&lt;、=、&gt;=等&#13;
&#13;
传递时分秒：`datetime.time(10, 25, 30)`&#13;
&#13;
获取时分秒：`a.hour   a.minute    a.second`&#13;
&#13;
- 要进行加减法的话，要转换成datetime进行&#13;
&#13;
## timedelta类&#13;
&#13;
时间差：表示两个datetime对象之间的间隔&#13;
&#13;
- datetime 与 timedelta进行加减得到新的 datetime&#13;
- datetime之间进行减法，得到timedelta&#13;
&#13;
```python&#13;
import datetime&#13;
a = datetime.datetime(2023, 10, 1, 10, 25, 30)&#13;
delta = datetime.timedelta(days=100)&#13;
&#13;
# 计算100天后的日期&#13;
b = a + delta&#13;
print(b)&#13;
&#13;
# 计算100天前的日期&#13;
b = a - delta&#13;
print(b)&#13;
```&#13;
&#13;
```python&#13;
import datetime&#13;
&#13;
a = datetime.datetime(2023, 10, 1, 10, 25, 30)&#13;
b = datetime.datetime(2024, 3, 1, 14, 25, 30)&#13;
&#13;
delta = b - a&#13;
&#13;
# 计算时间差&#13;
print(delta)&#13;
&#13;
# 输出时间差的天数&#13;
print(delta.days)&#13;
&#13;
# 输出秒数&#13;
print(delta.seconds)&#13;
&#13;
# 统一转换成秒&#13;
print(delta.total_seconds())&#13;
```&#13;
&#13;
- 日期、时间、日期时间转换成字符串：`strftime`&#13;
&#13;
```python&#13;
import datetime&#13;
&#13;
d = datetime.date(2023, 10, 1)&#13;
print(d.strftime('%Y--%m--%d'))&#13;
&#13;
t = datetime.time(17, 25, 35)&#13;
print(t.strftime('%H::%M::%S'))&#13;
&#13;
dt = datetime.datetime.combine(d, t)&#13;
print(dt.strftime('%Y--%m--%d %H::%M::%S'))&#13;
&#13;
# 2023--10--01&#13;
# 17::25::35&#13;
# 2023--10--01 17::25::35&#13;
```&#13;
&#13;
- 字符串转换成日期时间：`strptime(date_string, format)`&#13;
&#13;
```python&#13;
import datetime&#13;
a = datetime.datetime.strptime('2023-10-1-10-25-30', '%Y-%m-%d-%H-%M-%S')&#13;
print(a)  # 2023-10-01 10:25:30&#13;
```&#13;
&#13;
- 当前日期&#13;
&#13;
`datetime.date.today()`和 `datetime.datetime.now()`&#13;
&#13;
&#13;
&#13;
&#13;
&#13;
&#13;
&#13;
&#13;
&#13;
# 基本算法&#13;
# 9. 两个时间段之间有多少个周1&#13;
&#13;
```python&#13;
import datetime&#13;
&#13;
# 设置开始日期为1901年1月1日&#13;
start = datetime.date(1901, 1, 1)&#13;
# 设置结束日期为2024年11月12日&#13;
end = datetime.date(2024, 11, 12)&#13;
# 初始化计数器，用于记录星期一的数量&#13;
ans = 0&#13;
&#13;
# 使用while循环遍历从开始日期到结束日期的每一天&#13;
while start &lt;= end:&#13;
    # 如果当前日期是星期一（weekday()返回0代表星期一）&#13;
    if start.weekday() == 0:&#13;
        # 增加计数器&#13;
        ans += 1&#13;
    # 将日期增加一天，继续循环&#13;
    start += datetime.timedelta(days=1)&#13;
&#13;
# 打印出星期一的总数量&#13;
print(ans)&#13;
```&#13;
# 简单例题&#13;
&#13;
![image-20241112155831927](http://cdn.jsdelivr.net/gh/Carolynhomes/images@main/img/study/vue_springboot202411121558054.png)&#13;
```python&#13;
import os&#13;
import sys&#13;
&#13;
# 请在此输入您的代码&#13;
import datetime&#13;
&#13;
start = datetime.date(2022, 1, 1)&#13;
end = datetime.date(2022, 12, 31)&#13;
example = ['012', '123', '234', '345', '456', '567', '678', '789']&#13;
res = 0&#13;
&#13;
while start &lt;= end:&#13;
  now_date = start.strftime('%Y%m%d')  # 转换为字符串&#13;
  for x in example:&#13;
    if x in now_date:&#13;
      res += 1&#13;
      break&#13;
  start += datetime.timedelta(days=1)&#13;
&#13;
print(res)&#13;
```&#13;
&#13;
&#13;
&#13;
&#13;
。</description><guid isPermaLink="true">https://Carolynhomes.github.io/Carolynhomes/post/xue-xi-suan-fa-di-san-tian.html</guid><pubDate>Tue, 12 Nov 2024 08:11:04 +0000</pubDate></item><item><title>抱怨！当代大学生</title><link>https://Carolynhomes.github.io/Carolynhomes/post/bao-yuan-%EF%BC%81-dang-dai-da-xue-sheng.html</link><description>哎，不由得，总想抱怨一下，还是抱怨一下吧&#13;
&#13;
现在的大学生，真的是，纯粹意义上的，事不关己高高挂起，一点小集体责任感都没得&#13;
&#13;
难道  都很忙吗  也不见得呀      我看实验室也都很多空位&#13;
&#13;
w(ﾟДﾟ)w   真是麻烦啊   真的 有那么忙吗  但是大部分人走在路上还是在玩手机呀   那为什么 关于 集体性质的事情，一点都不在意捏~(￣▽￣)~*&#13;
&#13;
我真是体会不到哎，我想着我责任感已经很低了，没想到啊   现在一捡一大把&#13;
&#13;
啊啊啊啊啊啊啊啊啊啊啊，OK  &#13;
抱怨完了，&#13;
&#13;
反正群组里也没信&#13;
自己来搞吧&#13;
我觉得还是要有责任感，要有同情心&#13;
&#13;
(⊙﹏⊙)  我真的不适合当组长   狠不起来   真的难搞    &#13;
&#13;
对小集体的热情 也慢慢 都没了&#13;
不行 还是要保持   自己嗨，做自己最嗨&#13;
。</description><guid isPermaLink="true">https://Carolynhomes.github.io/Carolynhomes/post/bao-yuan-%EF%BC%81-dang-dai-da-xue-sheng.html</guid><pubDate>Mon, 11 Nov 2024 13:43:42 +0000</pubDate></item><item><title>学习算法第二天</title><link>https://Carolynhomes.github.io/Carolynhomes/post/xue-xi-suan-fa-di-er-tian.html</link><description># 基础内容&#13;
## 列表小结&#13;
&#13;
![image-20241111125559161](http://cdn.jsdelivr.net/gh/Carolynhomes/images@main/img/study/vue_springboot202411111256076.png)&#13;
&#13;
![image-20241111125215229](http://cdn.jsdelivr.net/gh/Carolynhomes/images@main/img/study/vue_springboot202411111252346.png)&#13;
&#13;
&#13;
## 切片例子&#13;
&#13;
&gt; 列表的部分元素组成新的列表&#13;
```python&#13;
a = ['apple', 'banana', 'cat', 'dog', 'egg']&#13;
&#13;
# 切片 [2,4)，步长为1&#13;
b = a[2:4]&#13;
print('b = ', b)&#13;
&#13;
# 切片 [0,n)，步长为2&#13;
c = a[::2]&#13;
print('c = ', c)&#13;
&#13;
# 前 3 个元素&#13;
d = a[:3]&#13;
print('d = ', d)&#13;
&#13;
# 后 3 个元素&#13;
e = a[-3:]&#13;
print('e = ', e)&#13;
```&#13;
# 基本算法&#13;
## 4. 阶乘和&#13;
&#13;
```python&#13;
n = int(input())&#13;
res = 0&#13;
&#13;
# res = 1! + 2! + 3! + ... + n!&#13;
# 外层循环，i遍历 [1, 2, 3, ..., n]&#13;
for i in range(1, n+1):&#13;
    # 内层循环目的是计算 now_res = i! = 1 * 2 * 3 * ... * i&#13;
    now_res = 1&#13;
    for j in range(1, i+1):&#13;
        now_res *= j&#13;
    res += now_res&#13;
&#13;
print(res)&#13;
&#13;
```&#13;
&#13;
## 5. 素数&#13;
&#13;
`输出L~R中的所有素数`&#13;
&#13;
```python&#13;
# 一个比较基础的筛选素数的方法&#13;
L = int(input())&#13;
R = int(input())&#13;
for i in range(L, R+1):&#13;
    # 判断数字i是否为素数&#13;
    ok = True&#13;
    for j in range(2, i):&#13;
        if i % j == 0:&#13;
            ok = False&#13;
            break&#13;
    &#13;
    if ok and i != 1:&#13;
        print(i)&#13;
```&#13;
&#13;
## 6. 打印菱形&#13;
&#13;
```python&#13;
# 改变的只有循环条件&#13;
# 其余都不改变&#13;
n = int(input())&#13;
&#13;
# 上半部分&#13;
for i in range(1, n+1):&#13;
    for j in range(n-i):&#13;
        print(' ', end='')&#13;
    for j in range(2*i-1):&#13;
        print('*', end='')&#13;
    print()&#13;
&#13;
# 下半部分&#13;
for i in range(n-1, 0, -1):&#13;
    for j in range(n-i):&#13;
        print(' ', end='')&#13;
    for j in range(2*i-1):&#13;
        print('*', end='')&#13;
    print()&#13;
&#13;
```&#13;
&#13;
## 7. 一个数的所有因子&#13;
&#13;
```python&#13;
# 遍历1——n的平方根&#13;
# 因为大于平方根的因子才可以通过除法求得&#13;
# 这样可以缩小一半的长度&#13;
# 对每个整数i，如果n % i == 0，那么i 和 n/i 都是n的因子&#13;
# i和n/i相等的话(只有完全平方数才可以，不然一个左，一个右)，只需要一个即可&#13;
def find_factors(n):&#13;
    '''求n的所有因子'''&#13;
    factors = []&#13;
    for i in range(1, int(n**0.5) + 1):&#13;
        if n % i == 0:&#13;
            factors.append(i)&#13;
            if i != n // i:&#13;
                factors.append(n // i)&#13;
    factors.remove(n)  # 去掉自身&#13;
    factors.sort()  # 升序排列&#13;
    return factors&#13;
```&#13;
&#13;
## 8. 最大公因数&#13;
&#13;
```python&#13;
m = int(input())&#13;
n = int(input())&#13;
&#13;
# 先求余数&#13;
r = m % n&#13;
# 当余数不为0，则gcd(m, n) = gcd(n, r)&#13;
while r != 0:&#13;
    # 新一轮的被除数m == 上一轮的除数n&#13;
    # 新一轮的除数n == 上一轮的除数r&#13;
    m = n&#13;
    n = r&#13;
&#13;
    # 新一轮的余数&#13;
    r = m % n&#13;
&#13;
print('gcd = ', n)&#13;
```&#13;
&#13;
# 简单例题&#13;
&#13;
![image-20241111102124343](http://cdn.jsdelivr.net/gh/Carolynhomes/images@main/img/study/vue_springboot202411111021424.png)&#13;
&#13;
```python&#13;
# 啧，我只能说，眼高手低了，只知道多重循环的我&#13;
# 一层循环，将y,z用x表示即可，x范围最多也就是500/15 母鸡&#13;
# y = 10-2x			z = 80+x&#13;
for x in range(6):  &#13;
    # 这个6，是因为y肯定不能是负数了，所以10-2x&gt;=0，即x&lt;=5，x&lt;6&#13;
    y = 10 - 2 * x&#13;
    z = 80 + x&#13;
    print(x, y, z)&#13;
```&#13;
&#13;
&#13;
。</description><guid isPermaLink="true">https://Carolynhomes.github.io/Carolynhomes/post/xue-xi-suan-fa-di-er-tian.html</guid><pubDate>Mon, 11 Nov 2024 05:10:01 +0000</pubDate></item><item><title>碎碎念</title><link>https://Carolynhomes.github.io/Carolynhomes/post/sui-sui-nian.html</link><description>$\textcolor{red}{得，直接答应我的同组同学一起学算法了，阿弥陀佛，好好利用时间吧} $&#13;
&#13;
&gt; [!tip]&#13;
&gt; 这个也很不错的，最起码思路会慢慢靠近算法，挺好挺好。</description><guid isPermaLink="true">https://Carolynhomes.github.io/Carolynhomes/post/sui-sui-nian.html</guid><pubDate>Sun, 10 Nov 2024 16:29:44 +0000</pubDate></item><item><title>哎，学习算法咯 第一天</title><link>https://Carolynhomes.github.io/Carolynhomes/post/ai-%EF%BC%8C-xue-xi-suan-fa-ge-%20-di-yi-tian.html</link><description># 基本算法&#13;
## 1. 海伦公式&#13;
&#13;
利用三边长度来求三角形面积，三边分别为 a, b, c，$p=\frac{a+b+c}{2}$	&#13;
&#13;
$s=\sqrt{p(p-a)(p-b)(p-c)}$&#13;
&#13;
## 2. 判断闰年&#13;
&#13;
`year`表示年份&#13;
&#13;
```python&#13;
if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0):&#13;
    print('润~')&#13;
```&#13;
&#13;
## 3. 求整数位数&#13;
&#13;
```python&#13;
# 方法一：&#13;
	# 先取绝对值(去掉符号)  转为字符串 len一下 &#13;
def digit_count(x):&#13;
    return len(str(abs(x)))&#13;
&#13;
# 方法二：&#13;
	# x 的十进制对数，得到最高位的指数，加 1 即为位数。</description><guid isPermaLink="true">https://Carolynhomes.github.io/Carolynhomes/post/ai-%EF%BC%8C-xue-xi-suan-fa-ge-%20-di-yi-tian.html</guid><pubDate>Sun, 10 Nov 2024 16:27:29 +0000</pubDate></item><item><title>虚拟主机搭建个人网站 </title><link>https://Carolynhomes.github.io/Carolynhomes/post/xu-ni-zhu-ji-da-jian-ge-ren-wang-zhan-%20.html</link><description># 1. 先搞一个域名和虚拟主机&#13;
**虚拟主机**：https://host.fuxsto.cn/&#13;
&#13;
**域名**：华为云`.top`域名，第一年9元，之后30，挺好得&#13;
&#13;
# 2. 解析域名&#13;
&#13;
`按顺序操作`&#13;
&#13;
![image-20241110114412675](http://cdn.jsdelivr.net/gh/Carolynhomes/images@main/img/study/vue_springboot202411101144739.png)&#13;
&#13;
打马赛克的是一个记录值，之后需要用得到&#13;
&#13;
![image-20241110113936510](http://cdn.jsdelivr.net/gh/Carolynhomes/images@main/img/study/vue_springboot202411101139551.png)&#13;
&#13;
![image-20241110114017315](http://cdn.jsdelivr.net/gh/Carolynhomes/images@main/img/study/vue_springboot202411101140402.png)&#13;
&#13;
![image-20241110114514740](http://cdn.jsdelivr.net/gh/Carolynhomes/images@main/img/study/vue_springboot202411101145786.png)&#13;
&#13;
这个最下面的记录值，就是刚开始的那个马赛克&#13;
&#13;
# 3. 上传网站框架&#13;
&#13;
![image-20241110115611647](http://cdn.jsdelivr.net/gh/Carolynhomes/images@main/img/study/vue_springboot202411101156911.png)&#13;
&#13;
&gt; 讲typecho的文件的压缩包上传过来解压，进行安装，如下图&#13;
&gt;&#13;
&gt; 当然，如果你有之前的typecho数据可以备份，等安装完之后，导入过来就可以&#13;
&#13;
![image-20241110120223834](http://cdn.jsdelivr.net/gh/Carolynhomes/images@main/img/study/vue_springboot202411101202900.png)&#13;
&#13;
**解压完之后，需要把压缩包给删除了哈~**&#13;
&#13;
# 4. 安装网站框架&#13;
&#13;
![image-20241110120327119](http://cdn.jsdelivr.net/gh/Carolynhomes/images@main/img/study/vue_springboot202411101203196.png)&#13;
&#13;
此时，打开你刚刚绑定的域名，就提示你要安装typecho框架。</description><guid isPermaLink="true">https://Carolynhomes.github.io/Carolynhomes/post/xu-ni-zhu-ji-da-jian-ge-ren-wang-zhan-%20.html</guid><pubDate>Sun, 10 Nov 2024 04:43:05 +0000</pubDate></item><item><title>04-前端项目配置、启动</title><link>https://Carolynhomes.github.io/Carolynhomes/post/04--qian-duan-xiang-mu-pei-zhi-%E3%80%81-qi-dong.html</link><description>## 启动步骤&#13;
&#13;
第一步&#13;
&#13;
![image-20241108215241449](http://cdn.jsdelivr.net/gh/Carolynhomes/images@main/img/study/vue_springboot202411082152630.png)&#13;
&#13;
第二步&#13;
&#13;
![image-20241108215255219](http://cdn.jsdelivr.net/gh/Carolynhomes/images@main/img/study/vue_springboot202411082152273.png)&#13;
&#13;
第三步&#13;
&#13;
先`OK，Apply` 都可以~&#13;
&#13;
![image-20241108215304603](http://cdn.jsdelivr.net/gh/Carolynhomes/images@main/img/study/vue_springboot202411082153652.png)&#13;
&#13;
第四步&#13;
&#13;
![image-20241108215312125](http://cdn.jsdelivr.net/gh/Carolynhomes/images@main/img/study/vue_springboot202411082153196.png)&#13;
&#13;
第五步&#13;
&#13;
显示下图，则表示启动成功&#13;
&#13;
![image-20241108215317334](http://cdn.jsdelivr.net/gh/Carolynhomes/images@main/img/study/vue_springboot202411082153439.png)&#13;
&#13;
点击链接以登录网址。</description><guid isPermaLink="true">https://Carolynhomes.github.io/Carolynhomes/post/04--qian-duan-xiang-mu-pei-zhi-%E3%80%81-qi-dong.html</guid><pubDate>Fri, 08 Nov 2024 13:57:33 +0000</pubDate></item><item><title>03-后端项目配置、启动</title><link>https://Carolynhomes.github.io/Carolynhomes/post/03--hou-duan-xiang-mu-pei-zhi-%E3%80%81-qi-dong.html</link><description>## 打开项目&#13;
&#13;
我们将 `springboot` 和 `vue` 的父目录作为项目的根目录，用 IDEA 打开即可。</description><guid isPermaLink="true">https://Carolynhomes.github.io/Carolynhomes/post/03--hou-duan-xiang-mu-pei-zhi-%E3%80%81-qi-dong.html</guid><pubDate>Fri, 08 Nov 2024 13:38:33 +0000</pubDate></item><item><title>远程抱歉一下</title><link>https://Carolynhomes.github.io/Carolynhomes/post/yuan-cheng-bao-qian-yi-xia.html</link><description>**今天下午问我路的两个老师，真的抱歉，我也不知道路，我以为在学校东门那，结果在西门那边，深深深感抱歉——**&#13;
&#13;
我还是吃晚饭的时候想起来这个事，看了一下地图的~~~。</description><guid isPermaLink="true">https://Carolynhomes.github.io/Carolynhomes/post/yuan-cheng-bao-qian-yi-xia.html</guid><pubDate>Fri, 08 Nov 2024 09:36:45 +0000</pubDate></item><item><title>02-从0搭建后端Springboot项目工程</title><link>https://Carolynhomes.github.io/Carolynhomes/post/02--cong-0-da-jian-hou-duan-Springboot-xiang-mu-gong-cheng.html</link><description>&gt; 仅仅自己学习记录使用，学习具体的，还要去看远春姐自己的详细教程：[https://space.bilibili.com/483684875?spm_id_from=333.337.0.0](https://space.bilibili.com/483684875?spm_id_from=333.337.0.0)&#13;
&#13;
## 打开IDEA 创建新项目&#13;
&#13;
## 用Spring Boot 的方式创建工程&#13;
&#13;
选配置参照下图配好&#13;
&#13;
![](https://cdn.nlark.com/yuque/0/2024/png/35081558/1731055823750-daf33ec0-7994-47b0-b9d4-b2ea92101227.png)&#13;
&#13;
如果没有下载jdk21，可以查看这篇教程下载配置jdk&#13;
&#13;
[最详细jdk安装以及配置环境（保姆级教程）_java_无尽的沉默-GitCode 开源社区](https://gitcode.csdn.net/65e7d8b41a836825ed78a53c.html?dp_token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6NDMzNjgxNSwiZXhwIjoxNzIxMjg2NDMzLCJpYXQiOjE3MjA2ODE2MzMsInVzZXJuYW1lIjoic2luYXRfMzQ2NDc4MzYifQ.B81WjxjGx2-qzahGkqZYSUZTqaN77gHpuuYqAjnmZPM)&#13;
&#13;
![](https://cdn.nlark.com/yuque/0/2024/png/35081558/1731056011465-2e1777fc-4752-40c3-8687-b1478daf2d60.png)&#13;
&#13;
&gt; 这里的版本号，不一样也没事，进去之后可以在`pom.xml` 文件里修改版本&#13;
&#13;
到这里，springboot 工程已经创建好了，系统会自动在mycode文件夹里创建一个springboot文件夹。</description><guid isPermaLink="true">https://Carolynhomes.github.io/Carolynhomes/post/02--cong-0-da-jian-hou-duan-Springboot-xiang-mu-gong-cheng.html</guid><pubDate>Fri, 08 Nov 2024 08:58:23 +0000</pubDate></item><item><title>01-从0搭建前端Vue项目工程</title><link>https://Carolynhomes.github.io/Carolynhomes/post/01--cong-0-da-jian-qian-duan-Vue-xiang-mu-gong-cheng.html</link><description>&gt; 仅仅自己学习记录使用，学习具体的，还要去看远春姐自己的详细教程：[https://space.bilibili.com/483684875?spm_id_from=333.337.0.0](https://space.bilibili.com/483684875?spm_id_from=333.337.0.0)&#13;
&#13;
vue官网文档： [https://cli.vuejs.org/zh/guide/installation.html](https://cli.vuejs.org/zh/guide/installation.html)&#13;
&#13;
# 1.安装Vue&#13;
&#13;
## 1.1创建一个文件夹&#13;
&#13;
下面是我创建的一个 `mycode_yuanchun` 文件夹作为我项目的根目录，我们创建的 `Vue工程 ` 就放在这个文件夹里。</description><guid isPermaLink="true">https://Carolynhomes.github.io/Carolynhomes/post/01--cong-0-da-jian-qian-duan-Vue-xiang-mu-gong-cheng.html</guid><pubDate>Fri, 08 Nov 2024 08:28:51 +0000</pubDate></item><item><title>(⊙﹏⊙)我╮(╯▽╰)╭</title><link>https://Carolynhomes.github.io/Carolynhomes/post/%28%E2%8A%99%EF%B9%8F%E2%8A%99%29-wo-%E2%95%AE%28%E2%95%AF%E2%96%BD%E2%95%B0%29%E2%95%AD.html</link><description>&gt; [!important]&#13;
&gt; 半途而废，真的是太简单了&#13;
&gt; 但是这个小白做毕设系列，我打算停了，就是感觉，有点乱~ 这笔记也记得很不清楚，隔两天，看，完犊子，这都是啥&#13;
&gt; 还是跟之前的远春姐的吧&#13;
&#13;
&gt; [!warning]&#13;
&gt; $\textcolor{red}{还是得立一个 Flag 啊， 那就来~ }$&#13;
&gt; 一直跟着远春姐这个系列，笔记也要很精细一点！ &#13;
&gt; 直到完工！ 明白？ 明白！！！。</description><guid isPermaLink="true">https://Carolynhomes.github.io/Carolynhomes/post/%28%E2%8A%99%EF%B9%8F%E2%8A%99%29-wo-%E2%95%AE%28%E2%95%AF%E2%96%BD%E2%95%B0%29%E2%95%AD.html</guid><pubDate>Fri, 08 Nov 2024 07:18:27 +0000</pubDate></item><item><title>论文汇报01</title><link>https://Carolynhomes.github.io/Carolynhomes/post/lun-wen-hui-bao-01.html</link><description>&#13;
&#13;
# 细节内容&#13;
&#13;
## 困难性问题&#13;
&#13;
困难性问题是指一类决策问题，这类问题不能在多项式时间内解决。</description><guid isPermaLink="true">https://Carolynhomes.github.io/Carolynhomes/post/lun-wen-hui-bao-01.html</guid><pubDate>Fri, 08 Nov 2024 05:47:12 +0000</pubDate></item><item><title>问题：TC字体是横着的</title><link>https://Carolynhomes.github.io/Carolynhomes/post/wen-ti-%EF%BC%9ATC-zi-ti-shi-heng-zhao-de.html</link><description>歪着头到“字体”栏将“对话框字体”更改为想要的字体就可以了。</description><guid isPermaLink="true">https://Carolynhomes.github.io/Carolynhomes/post/wen-ti-%EF%BC%9ATC-zi-ti-shi-heng-zhao-de.html</guid><pubDate>Fri, 08 Nov 2024 05:40:10 +0000</pubDate></item><item><title>TC——Total Commander</title><link>https://Carolynhomes.github.io/Carolynhomes/post/TC%E2%80%94%E2%80%94Total%20Commander.html</link><description>&gt; 这个链接介绍了TC&#13;
&#13;
我先试试行不行，主要我 感觉自带的管理器，复制粘贴一下很麻烦，就想着试试其他的&#13;
https://networm.me/2022/01/09/total-commander/#%E7%8E%AF%E5%A2%83。</description><guid isPermaLink="true">https://Carolynhomes.github.io/Carolynhomes/post/TC%E2%80%94%E2%80%94Total%20Commander.html</guid><pubDate>Fri, 08 Nov 2024 05:36:26 +0000</pubDate></item><item><title>设置 TC 为系统默认的资源管理器</title><link>https://Carolynhomes.github.io/Carolynhomes/post/she-zhi-%20TC%20-wei-xi-tong-mo-ren-de-zi-yuan-guan-li-qi.html</link><description>&gt; 亲测生效&#13;
1. 打开注册表：Win+R → regedit&#13;
&#13;
2. 定位 HKEY_CLASSES_ROOT\Directory\shell，修改 shell 默认值为 TC&#13;
&#13;
3. 在 shell 下新建一个子项 TC&#13;
&#13;
4. 在 TC 下继续新建一个子项 Command，修改默认值为：&#13;
`'C:\TotalCommander\TOTALCMD64.EXE' '/R=%1'`&#13;
（第一个引号内的加重字体代表 TC 的安装路径，以个人电脑为准）。</description><guid isPermaLink="true">https://Carolynhomes.github.io/Carolynhomes/post/she-zhi-%20TC%20-wei-xi-tong-mo-ren-de-zi-yuan-guan-li-qi.html</guid><pubDate>Fri, 08 Nov 2024 05:31:45 +0000</pubDate></item><item><title>06. Vue管理系统速成</title><link>https://Carolynhomes.github.io/Carolynhomes/post/06.%20Vue-guan-li-xi-tong-su-cheng.html</link><description>课程链接：https://www.bilibili.com/video/BV1Bj41167JM?spm_id_from=333.788.videopod.sections&amp;vd_source=5c34fdff72dc0c2c15c307e789fe5140&#13;
&#13;
&gt; [!important]&#13;
&gt; 我只能说，这个课，真不好做笔记，这部分的内容，得换个形式&#13;
&gt; 这个课，讲的主要的是，利用`ElementUI来进行`菜单栏，然后各种小的点的实现&#13;
&gt; 实现的具体内容如下图，我感觉可以直接来写，然后分析代码&#13;
&gt; 我打算用这种方式&#13;
&#13;
&gt; [!warning]&#13;
&gt; But，因为手头正好有一个，不过可以暂时先放着，先不急着实现，可以借助这个来完善我的小项目的前端界面&#13;
&gt; 还是要赶一下 `springboot`的相关内容，主要是前后端，怎么交互，这个是项目的主体，最好明天搞定~。</description><guid isPermaLink="true">https://Carolynhomes.github.io/Carolynhomes/post/06.%20Vue-guan-li-xi-tong-su-cheng.html</guid><pubDate>Wed, 06 Nov 2024 14:13:54 +0000</pubDate></item><item><title>Google浏览器主页被篡改</title><link>https://Carolynhomes.github.io/Carolynhomes/post/Google-liu-lan-qi-zhu-ye-bei-cuan-gai.html</link><description>[Google浏览器主页被篡改](https://blog.csdn.net/yang8828/article/details/134572530)&#13;
&#13;
本该是**新建标签页**的样子，但是却显示的其他的浏览器样式&#13;
&#13;
**这种一般是被软件篡改的，或者是联想电脑管家进行了保护**&#13;
- 如果是前一种，那么参考前两个方法，如果没用，则可能是因为联想电脑管家的原因，那么第三种方法即可。</description><guid isPermaLink="true">https://Carolynhomes.github.io/Carolynhomes/post/Google-liu-lan-qi-zhu-ye-bei-cuan-gai.html</guid><pubDate>Wed, 06 Nov 2024 04:23:11 +0000</pubDate></item><item><title>记录一下日常碰到的网站</title><link>https://Carolynhomes.github.io/Carolynhomes/post/ji-lu-yi-xia-ri-chang-peng-dao-de-wang-zhan.html</link><description># 电影电视剧&#13;
## 七味网&#13;
https://www.qwnull.com/&#13;
&gt; 感觉画质好像还可以~ 还有各种网盘资源，能存到网盘分享之类的&#13;
&gt; 电脑打开没啥广告&#13;
。</description><guid isPermaLink="true">https://Carolynhomes.github.io/Carolynhomes/post/ji-lu-yi-xia-ri-chang-peng-dao-de-wang-zhan.html</guid><pubDate>Wed, 06 Nov 2024 01:46:14 +0000</pubDate></item><item><title>碎碎碎</title><link>https://Carolynhomes.github.io/Carolynhomes/post/sui-sui-sui.html</link><description>&gt; [!important]&#13;
&gt; 感觉虽然我想学习一些技术什么的，但是，论文也是必不可少的，而且是必须要看的。</description><guid isPermaLink="true">https://Carolynhomes.github.io/Carolynhomes/post/sui-sui-sui.html</guid><pubDate>Tue, 05 Nov 2024 12:19:36 +0000</pubDate></item><item><title>05-Vue使用ElementUI搭建界面</title><link>https://Carolynhomes.github.io/Carolynhomes/post/05-Vue-shi-yong-ElementUI-da-jian-jie-mian.html</link><description># ElementUI 官网&#13;
&#13;
https://element.eleme.cn/#/zh-CN/component/installation&#13;
&#13;
# Vue 安装 ElementUI&#13;
&#13;
用 idea 打开你的项目目录，然后打开终端 terminal，&#13;
&#13;
```&#13;
cd vue&#13;
```&#13;
&#13;
然后运行 `npm i element-ui -S`&#13;
&#13;
**没搞定的检查下 npm 镜像，修改镜像源为淘宝**&#13;
&#13;
```&#13;
npm config set registry https://registry.npmmirror.com&#13;
```&#13;
&#13;
查看 npm 镜像&#13;
&#13;
```&#13;
npm config get&#13;
```&#13;
&#13;
或者安装 `nrm`，管理 `npm`镜像&#13;
&#13;
```&#13;
npm install nrm -g&#13;
nrm` 切换镜像为 `taobao&#13;
nrm ls&#13;
nrm use taobao&#13;
nrm current&#13;
```&#13;
&#13;
![img](https://cdn.nlark.com/yuque/0/2023/png/751015/1691587364456-35f880ef-8189-483c-a750-bc94eb09e3d4.png#averageHue=%232e2e2d&amp;clientId=ua3fd209b-0afa-4&amp;from=paste&amp;height=207&amp;id=u802a3d1d&amp;originHeight=259&amp;originWidth=778&amp;originalType=binary&amp;ratio=1.25&amp;rotation=0&amp;showTitle=false&amp;size=40110&amp;status=done&amp;style=none&amp;taskId=u981a5c3d-0330-4cf1-bc5b-0149edbca68&amp;title=&amp;width=622.4)![img](https://cdn.nlark.com/yuque/0/2023/png/751015/1691587394872-94ee0aa1-50c9-499f-85a0-a08954064fc5.png#averageHue=%2331302f&amp;clientId=ua3fd209b-0afa-4&amp;from=paste&amp;height=49&amp;id=uab0f175a&amp;originHeight=61&amp;originWidth=646&amp;originalType=binary&amp;ratio=1.25&amp;rotation=0&amp;showTitle=false&amp;size=7987&amp;status=done&amp;style=none&amp;taskId=u2de55129-8987-4b8e-9a67-b39cbd70daa&amp;title=&amp;width=516.8)![img](https://cdn.nlark.com/yuque/0/2023/png/751015/1691587411488-655ba39b-fd4f-47fa-8b97-195253540685.png#averageHue=%23302e2d&amp;clientId=ua3fd209b-0afa-4&amp;from=paste&amp;height=167&amp;id=u2ae2e71b&amp;originHeight=209&amp;originWidth=684&amp;originalType=binary&amp;ratio=1.25&amp;rotation=0&amp;showTitle=false&amp;size=32886&amp;status=done&amp;style=none&amp;taskId=u6f770321-88c7-4020-8a26-773321c27ba&amp;title=&amp;width=547.2)&#13;
&#13;
# Vue 配置安装 ElementUI&#13;
&#13;
在 `main.js`里引入下面的内容&#13;
&#13;
```javascript&#13;
import ElementUI from 'element-ui';&#13;
import 'element-ui/lib/theme-chalk/index.css';&#13;
&#13;
Vue.use(ElementUI, { size: 'small' });&#13;
```&#13;
&#13;
上面代码作用：在你的Vue项目中引入并注册Element UI库，同时指定使用小号尺寸的组件。</description><guid isPermaLink="true">https://Carolynhomes.github.io/Carolynhomes/post/05-Vue-shi-yong-ElementUI-da-jian-jie-mian.html</guid><pubDate>Tue, 05 Nov 2024 08:18:00 +0000</pubDate></item><item><title>04-Git速成</title><link>https://Carolynhomes.github.io/Carolynhomes/post/04-Git-su-cheng.html</link><description>## 视频教程&#13;
&#13;
https://www.bilibili.com/video/BV1um4y1s7AN/?spm_id_from=333.788.videopod.sections&amp;vd_source=5c34fdff72dc0c2c15c307e789fe5140&#13;
&#13;
## 软件安装&#13;
&#13;
官方下载（比较慢）：https://git-scm.com/downloads&#13;
&#13;
## gitee&#13;
&#13;
注册账号： https://gitee.com/&#13;
&#13;
新建一个仓库，输入名字之后，直接确定即可`（我懒得自己想名字，就跟教程一样了）`&#13;
&#13;
![image](https://github.com/user-attachments/assets/4bd69d8d-7a25-4605-b1da-8e37f4e533d3)&#13;
## 步骤&#13;
&#13;
### 先初始化项目目录为git仓库&#13;
&#13;
先进入对应目录下的cmd&#13;
&#13;
&gt; 或者打开git&#13;
&#13;
然后，输入`git init`把这个目录变成一个`git`仓库&#13;
&#13;
&gt;  [!TIP]&#13;
&gt;&#13;
&gt; 我就是没有把git配置到环境变量，我是直接在目录空白处，git bash打开了&#13;
&#13;
### 本地仓库跟远程的仓库建立连接&#13;
&#13;
建议直接 `--global`&#13;
&#13;
&gt; 在此之前，应先配置一下git&#13;
&gt;&#13;
&gt; **git config  user.email '[your_email@example.com](mailto:your_email@example.com)'**&#13;
&gt;&#13;
&gt; `git config  --global user.email 'your_email@example.com'`&#13;
&gt;&#13;
&gt; **git config  user.name 'username'**&#13;
&gt;&#13;
&gt; `**git config --global user.name 'username'**`&#13;
&#13;
```bash&#13;
git remote add origin https://gitee.com/carolynhomes/honey2024.git&#13;
```&#13;
&#13;
`git remote -v` 看看配置&#13;
&#13;
![image](https://github.com/user-attachments/assets/4bd69d8d-7a25-4605-b1da-8e37f4e533d3)&#13;
### 新建 `.gitignore`文件&#13;
&#13;
```bash&#13;
.idea&#13;
node_modules&#13;
*.iml&#13;
```&#13;
&#13;
加进去&#13;
&#13;
### 暂存代码&#13;
&#13;
暂存代码 **git add . (要注意当前的仓库是否存在旧的仓库文件夹 .git，如果存在要删除掉)**&#13;
&#13;
```git&#13;
# 把当前目录除了 .gitignore描述之外的所有文件全部加入到暂存区&#13;
git add .&#13;
```&#13;
&#13;
然后执行`git status`查看状态，下图是正常状态：&#13;
&#13;
![image](https://github.com/user-attachments/assets/9c52bdac-71de-4752-b1a5-bb278cec076a)&#13;
### 提交文件到本地仓库&#13;
&#13;
`git commit -m '初次提交'`&#13;
&#13;
### 推送代码到远程仓库&#13;
&#13;
`git push -u origin 'master'`&#13;
&#13;
&gt; 强制覆盖远程仓库&#13;
&gt; **git push -f origin 'master'**&#13;
&#13;
![image](https://github.com/user-attachments/assets/8ad6a1cd-b811-4ebd-8eba-873d84e96304)&#13;
这就是成功了&#13;
&#13;
### idea推送到gitee&#13;
&#13;
![image](https://github.com/user-attachments/assets/0d3f770c-0403-4b14-abad-0083eb208ef7)&#13;
修改内容，之后点击 commit，然后输入备注，就可以点第三个&#13;
&#13;
然后弹出来继续点击`push`即可&#13;
&#13;
### 注意&#13;
&#13;
本地没有更新远程仓库的修改，直接提交会提示你错误&#13;
&#13;
![image](https://github.com/user-attachments/assets/6db7995b-3424-4453-ba6d-3f7f983b148d)&#13;
**在我们提交代码到远程仓库之前，需要先更新远程仓库的代码到本地**&#13;
&#13;
## git操作&#13;
&#13;
### 基本操作&#13;
&#13;
```bash&#13;
# 配置&#13;
# 全局配置&#13;
git config --global user.email 'your_email@example.com'&#13;
git config --global user.name 'username'&#13;
# 仓库配置&#13;
git config user.email 'your_email@example.com'&#13;
git config user.name 'username'&#13;
&#13;
git config --global --list&#13;
git config --list&#13;
&#13;
&#13;
# 新建仓库&#13;
git init&#13;
# 添加远程仓库&#13;
git remote add origin ''&#13;
# 查看远程仓库&#13;
git remote -v&#13;
&#13;
# 添加文件到暂存区&#13;
git add .&#13;
# 查看状态&#13;
git status&#13;
# 忽略文件&#13;
.gitignore文件&#13;
&#13;
# 提交&#13;
git commit -m 'init'&#13;
&#13;
# 拉取远程代码&#13;
git pull origin master&#13;
# 强制推送代码到远程仓库&#13;
git push -f origin master&#13;
&#13;
# 克隆代码&#13;
git clone ''&#13;
```&#13;
&#13;
### 常用操作&#13;
&#13;
```bash&#13;
# 列出本地所有分支&#13;
git branch&#13;
&#13;
# 新建一个分支，并切换到该分支&#13;
git checkout -b 分支名&#13;
# 切换分支&#13;
git checkout 分支名&#13;
# merge其他分支到当前分支&#13;
git merge 分支名&#13;
&#13;
# 暂存&#13;
git stash&#13;
git stash list&#13;
git stash pop [stash]&#13;
git stash apply [stash]&#13;
git stash drop [stash]&#13;
```。</description><guid isPermaLink="true">https://Carolynhomes.github.io/Carolynhomes/post/04-Git-su-cheng.html</guid><pubDate>Mon, 04 Nov 2024 07:38:22 +0000</pubDate></item><item><title>http重定向到https【cloudflare】</title><link>https://Carolynhomes.github.io/Carolynhomes/post/http-zhong-ding-xiang-dao-https%E3%80%90cloudflare%E3%80%91.html</link><description>&gt; [!TIP]&#13;
&gt; 因为我的GitHub主页，就是想换个域名，然后同时任何地方都可以访问GitHub，所以用cloudflare`那啥` 了一个`cdn`，然后会加速访问该网站等等（`专业术语===无`）&#13;
&#13;
参考本链接：https://blog.liyifan.xyz/post/http-zhong-ding-xiang-dao-https%E3%80%90cloudflare%E3%80%91.html&#13;
&#13;
然后就不会显示此网站不安全了~（I got it)。</description><guid isPermaLink="true">https://Carolynhomes.github.io/Carolynhomes/post/http-zhong-ding-xiang-dao-https%E3%80%90cloudflare%E3%80%91.html</guid><pubDate>Mon, 04 Nov 2024 05:26:49 +0000</pubDate></item><item><title>03-Vue快速入门</title><link>https://Carolynhomes.github.io/Carolynhomes/post/03-Vue-kuai-su-ru-men.html</link><description>## 课程演示代码&#13;
&#13;
https://pan.baidu.com/s/1IsFsMT8y1lhVQKwWFngmSw?pwd=t56j&#13;
&#13;
## 课程视频讲解&#13;
&#13;
https://www.bilibili.com/video/BV1c14y1z7SN/?spm_id_from=333.1296.top_right_bar_window_history.content.click&amp;vd_source=5c34fdff72dc0c2c15c307e789fe5140&#13;
&#13;
## Vue 起步（Vue2）&#13;
&#13;
文档：https://v2.cn.vuejs.org/&#13;
&#13;
**语法如下：**&#13;
&#13;
```javascript&#13;
var example1 = new Vue({&#13;
  el: '#example-1',&#13;
  data: {&#13;
    counter: 0&#13;
  }&#13;
})&#13;
```&#13;
&#13;
- `{{ }}` 变量，表达式渲染&#13;
- `v-html` html 模板，渲染 html&#13;
- `v-model` 绑定值（双向绑定）&#13;
- `v-if` `v-else-if` `v-else` 判断&#13;
- `v-bind` 简写：绑定属性&#13;
- `v-on` 简写 @ 事件绑定&#13;
- `v-for` 循环&#13;
- 动态 `class style`&#13;
&#13;
---&#13;
&#13;
下载软件 nodejs v16  &#13;
安装 node &amp; npm  &#13;
npm 配置淘宝镜像：&#13;
&#13;
```bash&#13;
npm config set registry http://registry.npm.taobao.org/&#13;
```&#13;
&#13;
## Vue 脚手架搭建&#13;
&#13;
`新建目录`：E:\local_blog\Bilibili\代码\小白做毕设&#13;
&#13;
脚手架工具：https://cli.vuejs.org/zh/guide/&#13;
&#13;
```bash&#13;
// 在cmd直接运行&#13;
npm install -g @vue/cli&#13;
&#13;
vue --version&#13;
&#13;
// 进入目录小白做毕设2024，再运行&#13;
vue create vue&#13;
```&#13;
&#13;
![image](https://github.com/user-attachments/assets/d46cb95f-8d53-4afe-93dc-37c1222adfd8)&#13;
&#13;
`如上图所示`就是安装成功&#13;
&#13;
之后执行命令：&#13;
&#13;
```bash&#13;
cd vue&#13;
npm run serve&#13;
```&#13;
&#13;
![image](https://github.com/user-attachments/assets/f56d7ff5-d451-4273-b7d6-d54b39da25cf)&#13;
&#13;
`如上图所示即为成功`&#13;
&#13;
## 对脚手架内容进行修改&#13;
&#13;
配置文件`vue.config.js`:&#13;
&#13;
```js&#13;
const { defineConfig } = require('@vue/cli-service')&#13;
module.exports = defineConfig({&#13;
  transpileDependencies: true,&#13;
  devServer: {&#13;
    port: 7000&#13;
  },&#13;
  chainWebpack: config =&gt;{&#13;
    config.plugin('html')&#13;
        .tap(args =&gt; {&#13;
          args[0].title = '青哥哥好帅啊';&#13;
          return args;&#13;
        })&#13;
  }&#13;
})&#13;
```&#13;
&#13;
`App.vue`&#13;
&#13;
```vue&#13;
&lt;template&gt;&#13;
  &lt;div id='app'&gt;&#13;
    &lt;router-view/&gt;&#13;
  &lt;/div&gt;&#13;
&lt;/template&gt;&#13;
```&#13;
&#13;
`HomeView.vue`&#13;
&#13;
```vue&#13;
&lt;template&gt;&#13;
  &lt;div&gt;&#13;
    你好你好啊&#13;
  &lt;/div&gt;&#13;
&lt;/template&gt;&#13;
&#13;
&lt;script&gt;&#13;
&#13;
export default {&#13;
  name: 'HomeView'&#13;
}&#13;
&lt;/script&gt;&#13;
```&#13;
&#13;
`router目录下的index.js`&#13;
&#13;
```js&#13;
import Vue from 'vue'&#13;
import VueRouter from 'vue-router'&#13;
&#13;
Vue.use(VueRouter)&#13;
&#13;
const routes = [&#13;
  {&#13;
    path: '/',&#13;
    name: 'home',&#13;
    component: () =&gt; import('../views/HomeView.vue')&#13;
  }&#13;
]&#13;
&#13;
const router = new VueRouter({&#13;
  mode: 'history',&#13;
  base: process.env.BASE_URL,&#13;
  routes&#13;
})&#13;
&#13;
export default router&#13;
```&#13;
&#13;
在`src目录下的assets新建一个css文件夹，新建global.css文件`&#13;
&#13;
```css&#13;
* {&#13;
    box-sizing: border-box;&#13;
}&#13;
body {&#13;
    color: #333;&#13;
    font-size: 14px;&#13;
    margin: 0;&#13;
    padding: 0;&#13;
}&#13;
```&#13;
&#13;
。</description><guid isPermaLink="true">https://Carolynhomes.github.io/Carolynhomes/post/03-Vue-kuai-su-ru-men.html</guid><pubDate>Mon, 04 Nov 2024 05:17:23 +0000</pubDate></item><item><title>Everything 关闭开机自动启动</title><link>https://Carolynhomes.github.io/Carolynhomes/post/Everything%20-guan-bi-kai-ji-zi-dong-qi-dong.html</link><description>1. 选择 `工具`-&gt;`选项`&#13;
&#13;
2. 点击`常规` （我还以为不能点这个，醉了）&#13;
&#13;
3. 关闭 开机自动启动和以管理员运行即可 **（`因为我要换一个Listary用了`）**。</description><guid isPermaLink="true">https://Carolynhomes.github.io/Carolynhomes/post/Everything%20-guan-bi-kai-ji-zi-dong-qi-dong.html</guid><pubDate>Mon, 04 Nov 2024 04:18:29 +0000</pubDate></item><item><title>Gmeek 给全局文章加目录</title><link>https://Carolynhomes.github.io/Carolynhomes/post/Gmeek%20-gei-quan-ju-wen-zhang-jia-mu-lu.html</link><description>&gt; 2024年11月4日10点19分 官方的那个好像G了， 然后用另一个即可&#13;
&#13;
&gt; [!Tip]&#13;
&gt; 在右下角有个圆形按钮，点击就可以弹出目录。</description><guid isPermaLink="true">https://Carolynhomes.github.io/Carolynhomes/post/Gmeek%20-gei-quan-ju-wen-zhang-jia-mu-lu.html</guid><pubDate>Mon, 04 Nov 2024 02:22:48 +0000</pubDate></item><item><title>Gmeek 修改文章发布时间</title><link>https://Carolynhomes.github.io/Carolynhomes/post/Gmeek%20-xiu-gai-wen-zhang-fa-bu-shi-jian.html</link><description>&gt; 也就是以更新时间排序的意思&#13;
&#13;
如需修改发布时间，可以在文章 `最后一行(后面不能有空行) `添加如下代码。</description><guid isPermaLink="true">https://Carolynhomes.github.io/Carolynhomes/post/Gmeek%20-xiu-gai-wen-zhang-fa-bu-shi-jian.html</guid><pubDate>Mon, 04 Nov 2024 02:03:54 +0000</pubDate></item><item><title>日常生活中碰到的问题</title><link>https://Carolynhomes.github.io/Carolynhomes/post/ri-chang-sheng-huo-zhong-peng-dao-de-wen-ti.html</link><description>&#13;
&#13;
参考文章（很详细）：https://www.zhihu.com/question/381961379/answer/2887802581&#13;
&gt; [!TIP]&#13;
&gt; 里面的 `桌面搬家` `更改新内容的保存位置`，建议都这么干&#13;
&#13;
。</description><guid isPermaLink="true">https://Carolynhomes.github.io/Carolynhomes/post/ri-chang-sheng-huo-zhong-peng-dao-de-wen-ti.html</guid><pubDate>Sun, 03 Nov 2024 11:12:40 +0000</pubDate></item><item><title>Gmeek强调信息的5种方式</title><link>https://Carolynhomes.github.io/Carolynhomes/post/Gmeek-qiang-diao-xin-xi-de-5-zhong-fang-shi.html</link><description>&gt; [!NOTE]&#13;
&gt; Useful information that users should know, even when skimming content.——[!NOTE]&#13;
&#13;
&gt; [!TIP]&#13;
&gt; Helpful advice for doing things better or more easily.——[!TIP]&#13;
&#13;
&gt; [!IMPORTANT]&#13;
&gt; Key information users need to know to achieve their goal.——[!IMPORTANT]&#13;
&#13;
&gt; [!WARNING]&#13;
&gt; Urgent info that needs immediate user attention to avoid problems.——[!WARNING]&#13;
&#13;
&gt; [!CAUTION]&#13;
&gt; Advises about risks or negative outcomes of certain actions.——[!CAUTION]&#13;
。</description><guid isPermaLink="true">https://Carolynhomes.github.io/Carolynhomes/post/Gmeek-qiang-diao-xin-xi-de-5-zhong-fang-shi.html</guid><pubDate>Sun, 03 Nov 2024 11:01:32 +0000</pubDate></item><item><title>Gpt通知</title><link>https://Carolynhomes.github.io/Carolynhomes/post/Gpt-tong-zhi.html</link><description># 2024年11月23日15点04分&#13;
得 换地方了，我觉得，反正都要本地存储一下，哪个方便哪个来&#13;
在这里看通知，真是抱歉，来回迂回：http://mutianbaiyi.top/index.php/archives/86/&#13;
&#13;
# 2024年11月20日11点49分&#13;
界面进行了改版，帐号是之前那个码，密码：1-6&#13;
而且可以自己注册，续费等等，链接贴一下：https://nbai.site/list/#/register?inviter=S85SL3&#13;
&#13;
现在官网的链接是下面图片这样，我现在的套餐还能3个月，之后就可能换成这些套餐了。</description><guid isPermaLink="true">https://Carolynhomes.github.io/Carolynhomes/post/Gpt-tong-zhi.html</guid><pubDate>Sun, 03 Nov 2024 09:37:37 +0000</pubDate></item><item><title>02-JS快速入门</title><link>https://Carolynhomes.github.io/Carolynhomes/post/02-JS-kuai-su-ru-men.html</link><description>菜鸟教程：https://www.runoob.com/js/js-tutorial.html&#13;
&#13;
# JS&#13;
&#13;
百度打开右键，F12 检查，打开控制台，可以执行 js 代码&#13;
&#13;
## 对象操作&#13;
&#13;
- 对象的增删改查  &#13;
&#13;
- 创建对象`let obj = {}` &#13;
&#13;
现在对象的创建有两种  var 不常用了&#13;
&#13;
主要是  let obj = {} 和  const obj = {} ，后一个主要用于常量&#13;
&#13;
- 新增属性 `obj.a = 1`&#13;
- 修改属性 `obj.a = 'a'`&#13;
- 查询属性 `obj.a`&#13;
- 删除属性 `delete obj.a`&#13;
&#13;
```javascript&#13;
 &lt;body&gt;&#13;
   &lt;script&gt;&#13;
     let obj = {};&#13;
     const obj2 = {};&#13;
 &#13;
     obj.a = '1';&#13;
     console.log(obj);&#13;
 &#13;
     obj.a = true;&#13;
     console.log(obj);&#13;
 &#13;
     delete obj.a;&#13;
     console.log(obj);&#13;
   &lt;/script&gt;&#13;
 &lt;/body&gt;&#13;
```&#13;
&#13;
- 其他操作&#13;
&#13;
- `obj[a] = 1`&#13;
&#13;
赋值操作有两种&#13;
&#13;
```&#13;
 obj.name = '张三'`&#13;
 `obj['address'] = '安徽省'&#13;
```&#13;
&#13;
第二种，方括号里面只能是 `字符串`&#13;
&#13;
- Object.assign(a, b)  对象转移——深拷贝，将 b 的对象属性给 a，但是 a 接下来继续新增属性，b 不会增加&#13;
&#13;
- 直接等  是浅拷贝，同样情况下， b 会增加&#13;
&#13;
```javascript&#13;
 // 两种深拷贝例子和一个浅拷贝例子&#13;
 let teacher = {};  // 新的对象, 老师&#13;
 Object.assign(teacher, user);  // 深拷贝&#13;
 console.log('================');&#13;
 console.log(teacher);&#13;
 &#13;
 teacher.birth = '1993.10.01';&#13;
 console.log('================teacher=======');&#13;
 console.log(teacher);&#13;
 console.log('================user=======');&#13;
 console.log(user);&#13;
 &#13;
 let teacher1 = Object.assign({}, user);&#13;
 &#13;
 let teacher2 = user;  // 浅拷贝&#13;
 teacher2.xxx = '哈哈哈哈';&#13;
 console.log('================teacher2=======');&#13;
 console.log(teacher2);&#13;
 console.log('================user=======');&#13;
 console.log(user);&#13;
 &#13;
 &#13;
 let userStr = JSON.stringify(user);&#13;
 let teacher3 = JSON.parse(userStr);  // 深拷贝&#13;
 teacher3.yyyy = '哈哈哈';&#13;
 console.log('================teacher3=======');&#13;
 console.log(teacher3);&#13;
 console.log('================user=======');&#13;
 console.log(user);&#13;
```&#13;
&#13;
- `let {name} = user`    解构语法&#13;
&#13;
```javascript&#13;
 console.log('================user拿出一个属性=======');&#13;
 console.log(user.name);&#13;
 console.log(user['name']);&#13;
 &#13;
 let { name } = user;&#13;
 console.log('================解构语法=======');&#13;
 console.log(name);&#13;
```&#13;
&#13;
- ?.  —— 安全访问数据的方式&#13;
&#13;
- `b = a?.name` a 是 `undefined`或者 `null`，b 不报错，其他清空都会报错   &#13;
&#13;
- ?? —— `b = a ?? c`  a 是 `undefined` 或者 `null` 则赋值 c 给 b&#13;
- ||  —— `b = a || c` a 是 `undefined`或者 `null`，则取 c&#13;
- ??= —— `b ??= a` 左侧是 `undefined`或者 `null`，则取右侧的值&#13;
&#13;
```javascript&#13;
 let jsonObj = {1: 'a', 2: 'b'}&#13;
 console.log(jsonObj[1])  // a&#13;
 // 只能这样访问&#13;
 &#13;
 // == 只比较值，不比较类型&#13;
 // === 都比较&#13;
 &#13;
 // 我们也可以将该对象的属性进行操作&#13;
 let jsObj = { 1: 'a', 2: 'b' };&#13;
 console.log(jsObj[1]);  // 在 JavaScript 中，对象的键总是以字符串形式存储的，即使你在定义时使用了数字，其实在内部是这样的：let jsObj = { '1': 'a', '2': 'b' };&#13;
 &#13;
 // forin结构  对象循环 动态修改 value的值&#13;
 for (const key in jsObj) {&#13;
   jsObj[key] = jsObj[key] + '123';&#13;
   // console.log(key + '=' + jsObj[key])&#13;
   if (key == '1') {&#13;
     jsObj[key] = jsObj[key] + '123' + '青哥哥好帅啊';&#13;
   }&#13;
 }&#13;
 &#13;
 console.log(jsObj);&#13;
```&#13;
&#13;
## 数组操作&#13;
&#13;
### 数组的增删改查&#13;
&#13;
- 创建数组 `let arr = []`&#13;
- 新增元素 &#13;
    - `arr[0] = 1`    `arr[2] = 3`&#13;
    - `push()`&#13;
    - `unshift()`&#13;
- 删除元素&#13;
    - `splice()`&#13;
    - `pop()`&#13;
    - `shift()`&#13;
&#13;
- 修改元素 `arr[index] = 1`&#13;
- 查询元素 `arr[index]`&#13;
- 截取元素 `slice()`&#13;
- 合并数组 `concat()`&#13;
&#13;
- 字符串变数组 `split()`&#13;
- 数组变字符串  `join()` 默认使用 , 分割&#13;
- 排序 `sort()` **有坑**  [1, 2, 10] -&gt; [1, 10, 2]&#13;
- 倒序 `reverse()`&#13;
- 获取元素序号 `indexOf()`  `lastIndexOf()`&#13;
- 【神器】 `filter()` 可以筛选和删除元素&#13;
- 【神器】`find()`&#13;
- `map`&#13;
- `forEach([item], [index])`&#13;
- reduce&#13;
    - 语法：`arr.reduce(function(pre, current, index, arr){...}, init);`&#13;
    - pre累积器累计回调的返回值，表示上一次调用回调时的返回值，或者初始值 init&#13;
    - cur表示当前正在处理的数组元素&#13;
    - index表示当前正在处理的数组元素的索引&#13;
    - arr 表示原数组&#13;
    - init 初始值&#13;
&#13;
```javascript&#13;
let arr3 = [2,3];&#13;
let arr4 = [1,4];&#13;
let arr5 = arr3.concat(arr4);&#13;
console.log(arr5);&#13;
&#13;
let str = '青哥哥讲课，真的很干啊啊啊';&#13;
console.log(str.split('，'));&#13;
&#13;
let arrB = [1,2,3,4];&#13;
console.log(arrB.join('| | |'));  // 数字数组变成了字符串&#13;
&#13;
let sortArr = [1,2,10,8,6,22,11];&#13;
let newSortArr = sortArr.sort((a,b) =&gt; a-b);  // unicode编码排序&#13;
console.log(newSortArr);  // [1,2,10] =&gt; [1, 10, 2]&#13;
&#13;
let reverseArr = [1,2,10,8,6,22,11];&#13;
console.log(reverseArr.reverse());&#13;
console.log(reverseArr.sort((a,b) =&gt; b-a));  // 完美的倒序方法&#13;
&#13;
let indexArr = [1,2,3];&#13;
console.log(indexArr.indexOf(3));  // 2  没有的时候是 -1  有这个元素就从 0 开始编号&#13;
&#13;
&#13;
&#13;
&lt;script&gt;&#13;
  let users = [ { name: '张三', age: 20 }, { name: '李四', age: 21 }, { name: '王二', age: 22 } ]&#13;
  let newUsers = []&#13;
  users.forEach(aaa =&gt; {&#13;
    if (aaa.age &gt; 20) {&#13;
      newUsers.push(aaa)&#13;
    }&#13;
  })&#13;
  console.log(newUsers)&#13;
&#13;
  let newUsers1 = users.filter(aaa =&gt; aaa.age &gt; 20 &amp;&amp; aaa.name.includes('李'))&#13;
  console.log(newUsers1)&#13;
&#13;
  // 删除数组的某一项&#13;
  // let inx&#13;
  // users.forEach((item, index) =&gt; {&#13;
  //   if (item.name === '李四') {&#13;
  //     inx = index&#13;
  //   }&#13;
  // })&#13;
  // users.splice(inx, 1)&#13;
  // console.log(users)&#13;
&#13;
  let newArr = users.filter(v =&gt; v.name !== '李四' &amp;&amp; v.name !== '王二')  // 删除数组的指定元素  是不是很舒服&#13;
  console.log('=======filter删除后=======')&#13;
  console.log(newArr)&#13;
&lt;/script&gt;&#13;
&#13;
&#13;
let lisi = users.find(v =&gt; v.name === '李四')&#13;
console.log(lisi)&#13;
&#13;
let lisiIndex = users.findIndex(v =&gt; v.name === '张三')&#13;
console.log(lisiIndex)&#13;
&#13;
&#13;
let names = users.map(v =&gt; v.name)&#13;
console.log(names)&#13;
&#13;
// 这段代码展示了 reduce 方法的两种用法：&#13;
&#13;
//计算 users 数组中所有用户年龄的总和，并加上 10 的偏移量。</description><guid isPermaLink="true">https://Carolynhomes.github.io/Carolynhomes/post/02-JS-kuai-su-ru-men.html</guid><pubDate>Sun, 03 Nov 2024 04:30:48 +0000</pubDate></item><item><title>01-HTML、CSS布局快速入门</title><link>https://Carolynhomes.github.io/Carolynhomes/post/01-HTML%E3%80%81CSS-bu-ju-kuai-su-ru-men.html</link><description># 学习资源&#13;
&#13;
- HTML： https://www.runoob.com/html/html-tutorial.html&#13;
- CSS： https://www.runoob.com/css/css-tutorial.html&#13;
- Vue： https://www.runoob.com/vue2/vue-tutorial.html&#13;
&#13;
# HTML&#13;
&#13;
- div&#13;
- span&#13;
- h1-h6&#13;
- i&#13;
- strong&#13;
- a&#13;
- img&#13;
- video&#13;
- input&#13;
- textarea&#13;
- button&#13;
&#13;
![image](https://github.com/user-attachments/assets/e28ac798-17da-4ebe-84b2-7096b1411804)&#13;
&#13;
# CSS 布局思路&#13;
&#13;
```&#13;
box-sizing: border-box;` 定义如何计算一个元素的总宽度和总高度，主要设置是否需要加上内边距(padding) 和边框等。</description><guid isPermaLink="true">https://Carolynhomes.github.io/Carolynhomes/post/01-HTML%E3%80%81CSS-bu-ju-kuai-su-ru-men.html</guid><pubDate>Sun, 03 Nov 2024 04:01:59 +0000</pubDate></item><item><title>快速搭建一个Github个人页面</title><link>https://Carolynhomes.github.io/Carolynhomes/post/kuai-su-da-jian-yi-ge-Github-ge-ren-ye-mian.html</link><description>&gt; 啊没错，就是搭建我现在这个，5分钟不到，搞定~&#13;
&#13;
# 自己操作步骤&#13;
$\textcolor{red}{我还是建议看视频的，很详细}$&#13;
&#13;
1. 【创建仓库】点击[通过模板创建仓库](https://github.com/new?template_name=Gmeek-template&amp;template_owner=Meekdai)，建议仓库名称为XXX.github.io，其中XXX为你的github用户名。</description><guid isPermaLink="true">https://Carolynhomes.github.io/Carolynhomes/post/kuai-su-da-jian-yi-ge-Github-ge-ren-ye-mian.html</guid><pubDate>Sun, 03 Nov 2024 02:21:30 +0000</pubDate></item><item><title>转来第一篇</title><link>https://Carolynhomes.github.io/Carolynhomes/post/zhuan-lai-di-yi-pian.html</link><description>啊啊啊啊，如果能免费，如果容量足够大，那自然最好了！！！！！(白嫖心理)。</description><guid isPermaLink="true">https://Carolynhomes.github.io/Carolynhomes/post/zhuan-lai-di-yi-pian.html</guid><pubDate>Sat, 02 Nov 2024 16:51:33 +0000</pubDate></item></channel></rss>